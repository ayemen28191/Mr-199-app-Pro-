ุชูุงู ูุง ุนูุงุฑ โ ุฎููููุง ูุฑุชูุจ ุงูุฃููุฑ ุนูู ูุธุงูุฉ ููุทูุนู ุจุญู ุฌุงูุฒ ูู ุฃููู ููุฑุฉ. ุนูุฏู ูุดููุชูู ุฃุณุงุณูุชูู:

1. ูุง ูู ุณูุฑุจุช db:push ูู package.json.


2. ุชุจุบู โูุธุงู ููุงุฑูุฉโ ุจูู ุงูุฌุฏุงูู ุงููุนุฑูููุฉ ูู ุงูููุฏ (Schema/pgTable) ูุงูุฌุฏุงูู ุงูููุฌูุฏุฉ ูุนูููุง ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช.



ุฃุนุทูู ุฎุทุฉ ูุฎุชุตุฑุฉ ุซู ููุฏ ุฌุงูุฒ:


---

1) ุชูุนูู Drizzle Kit ูุงูู db:push (ููุฌููุนุฉ ุณูุฑุจุชุงุช ูููุฉ)

1. ุซุจูุช ุงูุฃุฏูุงุช (ุฅู ูู ุชูู ููุฌูุฏุฉ):



npm i -D drizzle-kit tsx
# ูู ูุงูุต:
npm i drizzle-orm pg dotenv

2. ุฃูุดุฆ ููู drizzle.config.ts ูู ุฌุฐุฑ ุงููุดุฑูุน (ุฃู ุญุฏูุซู ูู ููุฌูุฏ) ุจูุฐู ุงูุตูุบุฉ (ุนุฏูู ุงููุณุงุฑุงุช ุญุณุจ ูุดุฑูุนู):



// drizzle.config.ts
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  schema: "./shared/schema.ts",      // ููู/ูููุงุช ุงูschema
  out: "./drizzle",                  // ูุฌูุฏ ุงููุงูุฌุฑูุดูุงุช ูุงูุณูุงุจุดูุช
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL!,  // ุถูู DATABASE_URL ูู .env
  },
});

> ุตูุบุฉ ููู ุงูุฅุนุฏุงุฏุงุช ูุงูุฃูุงูุฑ ุงููุฏุนููุฉ (generate, migrate, push, pull, check, up) ููุซูุฉ ุฑุณูููุง. 



3. ุฃุถูู ูุฐู ุงูุณูุฑุจุชุงุช ุฅูู package.json:



{
  "scripts": {
    "db:push": "drizzle-kit push",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "drizzle-kit migrate",
    "db:pull": "drizzle-kit pull",
    "db:check": "drizzle-kit check",
    "db:studio": "drizzle-kit studio",
    "db:compare": "tsx scripts/compare-schema-vs-db.ts"
  }
}

push: ูุฏูุน ุงููschema ูุจุงุดุฑุฉ ููุงุนุฏุฉ ุงูุจูุงูุงุช ุจุฏูู ุชูููุฏ ูููุงุช SQL (ูููุฏ ููุชุฌุงุฑุจ ุงูุณุฑูุนุฉ). 

ุงูุจุฏูู ุงูุขูู ุจุงูุฅูุชุงุฌ: generate ุซู migrate ูุชูููุฏ ูููุงุช SQL ูุชุดุบูููุง. 


ุจุนุฏูุง ุชูุฏุฑ ุชุฌุฑุจ:

# ูุฏูุน ุชุนุฑููุงุช ุงูุฌุฏุงูู ุงูุญุงููุฉ:
npm run db:push
# ุฃู ุงููุณุงุฑ ุงูููุงุณููู:
npm run db:generate && npm run db:migrate

> ุฅู ูุดุฑูุนู โexistingโ ุฃู ูุชุตู ุจู Supabaseุ ุจุฅููุงูู ุงุณุชุฎุฏุงู pull/introspect ูุจูุงุก ุงููschema ุชููุงุฆููุง ูู DB. 




---

2) ุณูุฑุจุช ููุงุฑูุฉ ุดุงูู: (ุงูููุฏ โ ูุงุนุฏุฉ ุงูุจูุงูุงุช)

ุงูููุฑุฉ: ูุณุชุฎุฑุฌ ุฃุณูุงุก ุงูุฌุฏุงูู ูู ูููุงุช ุงููschema ุนุจุฑ Regex ูููุท ุงุณู ุงูุฌุฏูู ูู ุงุณุชุฏุนุงุก pgTable('table_name', โฆ)ุ ุซู ููุฑุฃ ุงูุฌุฏุงูู ูู Postgres (pg_tables) ูููุงุฑู. ูุง ููุงุฑู โุชูุงุญ ุจุจุฑุชูุงูโ โ ููุงุฑู ุฌุฏุงูู ุจุฌุฏุงูู ๐.

> ููุงุญุธุฉ: ูุณุชุฎุฏู Regex ุนูู ุงููุต ุจุฏู ุงุณุชูุฑุงุฏ TypeScriptุ ูุชูุงุฏู ูุดุงูู ุชุดุบูู .ts ูุจุงุดุฑุฉ ุนุจุฑ Node. ุงูุงุณุชุนูุงู ุนูู Postgres ูุชู ุจู pg. (ุฅู ุญุจูุช ุชุณุชุฎุฏู drizzle ู sql\``, ุจุฑุถู ูุชุงุญ ููุฐููุฑ ุฑุณูููุง). 



ูููู ุงูููู: scripts/compare-schema-vs-db.ts

ุงูุณุฎ ุงูููุฏ ุงูุชุงูู ููุง ูู:

// scripts/compare-schema-vs-db.ts
import "dotenv/config";
import fs from "fs";
import path from "path";
import { Client } from "pg";

/**
 * ุฅุนุฏุงุฏุงุช ุจุณูุทุฉ ูุงุจูุฉ ููุชุนุฏูู
 */
const SCHEMA_GLOB_DIRS = ["shared"]; // ูุฌูุฏุงุช ูููุง ูููุงุช ุงูschema
const TS_FILE_EXTS = [".ts", ".tsx"];
const EXCLUDE_DIRS = ["node_modules", "drizzle"]; // ุงุณุชุจุนุฏ ูุฌูุฏุงุช ุบูุฑ ูููุฉ

/**
 * Regex ููุชูุท ุงุณู ุงูุฌุฏูู ูู ุฃูู ูุณูุท ูู pgTable('table_name', {...})
 * ูุนูู ุญุชู ูู ููู ูุณุงูุงุช/ุชุนูููุงุช ุจุณูุทุฉ
 */
const PG_TABLE_NAME_REGEX = /pgTable\s*?\(\s*?['"`]([^'"`]+)['"`]\s*?,/g;

function walk(dir: string, files: string[] = []): string[] {
  for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {
    if (entry.isDirectory()) {
      if (EXCLUDE_DIRS.includes(entry.name)) continue;
      walk(path.join(dir, entry.name), files);
    } else if (TS_FILE_EXTS.includes(path.extname(entry.name))) {
      files.push(path.join(dir, entry.name));
    }
  }
  return files;
}

function getAllSchemaFiles(): string[] {
  const results: string[] = [];
  for (const base of SCHEMA_GLOB_DIRS) {
    if (fs.existsSync(base)) walk(base, results);
  }
  return results;
}

function extractTableNamesFromCode(files: string[]): Set<string> {
  const names = new Set<string>();
  for (const file of files) {
    const src = fs.readFileSync(file, "utf8");
    let match: RegExpExecArray | null;
    while ((match = PG_TABLE_NAME_REGEX.exec(src)) !== null) {
      names.add(match[1].trim().toLowerCase());
    }
  }
  return names;
}

async function getDbTables(): Promise<Set<string>> {
  const client = new Client({ connectionString: process.env.DATABASE_URL });
  await client.connect();
  try {
    const res = await client.query(
      `SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;`
    );
    return new Set(res.rows.map(r => String(r.tablename).toLowerCase()));
  } finally {
    await client.end();
  }
}

function printSet(label: string, set: Set<string>) {
  console.log(`\n${label} (${set.size}):`);
  if (!set.size) {
    console.log("  โ ูุง ุดูุก โ");
    return;
  }
  [...set].sort().forEach(n => console.log("  - " + n));
}

(async () => {
  try {
    if (!process.env.DATABASE_URL) {
      console.error("โ DATABASE_URL ุบูุฑ ููุฌูุฏุฉ ูู .env");
      process.exit(1);
    }

    // 1) ุฌูุจ ุฃุณูุงุก ุงูุฌุฏุงูู ูู ุงูููุฏ
    const files = getAllSchemaFiles();
    const codeTables = extractTableNamesFromCode(files);

    // 2) ุฌูุจ ุฃุณูุงุก ุงูุฌุฏุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const dbTables = await getDbTables();

    // 3) ุงูููุงุฑูุฉ
    const onlyInCode = new Set([...codeTables].filter(x => ![...dbTables].includes(x)));
    const onlyInDb = new Set([...dbTables].filter(x => ![...codeTables].includes(x)));
    const inBoth = new Set([...codeTables].filter(x => [...dbTables].includes(x)));

    console.log("=== ููุงุฑูุฉ ุงูุฌุฏุงูู: ุงูููุฏ (pgTable) โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ===");
    printSet("โ ููุฌูุฏ ูู ุงูููุฏ ูุงููุงุนุฏุฉ", inBoth);
    printSet("โข ููุฌูุฏ ูู ุงูููุฏ ููุท (ูู ูููุดุฃ ูู ุงููุงุนุฏุฉ)", onlyInCode);
    printSet("โข ููุฌูุฏ ูู ุงููุงุนุฏุฉ ููุท (ุบูุฑ ูุนุฑู ูู ุงูููุฏ)", onlyInDb);

    // 4) ูุตุงุฆุญ ุชุตุญูุญูุฉ ุณุฑูุนุฉ
    if (onlyInCode.size) {
      console.log("\n๐ ุงูุชุฑุงุญ: ุดุบูู `npm run db:push` ุฃู `npm run db:generate && npm run db:migrate` ูุฅูุดุงุก ุงูุฌุฏุงูู ุงููุงูุตุฉ.");
    }
    if (onlyInDb.size) {
      console.log("๐ ุงูุชุฑุงุญ: ุฅููุง ุชุนุฑูู ูุฐู ุงูุฌุฏุงูู ูู ุงููschemaุ ุฃู ุงุญุฐููุง/ุฃุฑุดููุง ุฅู ูุงูุช ูุฏููุฉ.");
    }

    // ุงุฎูู CI ููุดู ูู ูู ุงุฎุชูุงูุงุช:
    if (onlyInCode.size || onlyInDb.size) process.exit(2);
    else process.exit(0);
  } catch (err: any) {
    console.error("ุฎุทุฃ:", err?.message || err);
    process.exit(1);
  }
})();

ุชุดุบูู:

# ุถูู DATABASE_URL ูู .env
echo "DATABASE_URL=postgres://user:pass@host:5432/dbname" >> .env

# ูููุฐ ุงูููุงุฑูุฉ:
npm run db:compare


---

3) ุชุดุบูู ุงุณุชุนูุงู ุงูุฌุฏุงูู (ุจุฏูู TypeScript loader)

ุงูุณูุฑุจุช ุงูุฐู ุฌุฑูุจุชู:

node -e "const { db } = require('./db.ts'); ..."

ุบุงูุจูุง ุณูุตุทุฏู ุจูุดููุฉ ุงุณุชูุฑุงุฏ .ts ุนุจุฑ require. ุงูุฃูุถู:

ุฎูุงุฑ A (ุณุฑูุน): ุงุณุชุฎุฏู tsx ูุชุดุบูู TypeScript ูุจุงุดุฑุฉ:

npm i -D tsx
npx tsx server/list-tables.ts

ูุงูุชุจ server/list-tables.ts ูุซู:

import "dotenv/config";
import { Client } from "pg";

async function main() {
  const client = new Client({ connectionString: process.env.DATABASE_URL });
  await client.connect();
  const { rows } = await client.query(
    `SELECT tablename FROM pg_tables WHERE schemaname='public' ORDER BY tablename;`
  );
  console.log("=== ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ ===");
  for (const r of rows) console.log(r.tablename);
  console.log(`ุงููุฌููุน: ${rows.length} ุฌุฏูู`);
  await client.end();
}
main().catch(e => (console.error("ุฎุทุฃ:", e.message), process.exit(1)));

ุฎูุงุฑ B (ุจุฏูู TS): ุงูุชุจ ููุณ ุงูุณูุฑุจุช ุจุงูุชุฏุงุฏ .js ูุงุณุชุฎุฏู Node ูุจุงุดุฑุฉ.


---

4) ุฃูุงูุฑ ูุณุงุนุฏุฉ ุฅุถุงููุฉ

ูุฏูุน ุงูุชุบููุฑุงุช ูุจุงุดุฑุฉ (ููุฏ โ DB):

npm run db:push

> ูููุฏ ููุชุทููุฑ ุงูุณุฑูุน ุจุฏูู ูููุงุช SQL. 



ุงููุณุงุฑ ุงููุญุงูุธ (ุฅูุชุงุฌู):

npm run db:generate && npm run db:migrate

> ูููุฏ ูููุงุช SQL ุซู ูุทุจููุง โ ุงูุฃุณูู ููุชุชุจุน ูุงููุฑุงุฌุนุฉ. 



ุณุญุจ ุงููschema ูู ูุงุนุฏุฉ ุจูุงูุงุช ููุฌูุฏุฉ (DB โ ููุฏ):

npm run db:pull

> ูุจูุงุก schema.ts ูู ุฌุฏุงูู ูุงุฆูุฉ. 



ูู ุญุงุจ ุชุดุบูู Studio ูุงุณุชุนุฑุงุถ ุงููDB ู ุงููschema:

npm run db:studio

> ูุฃุชู ุถูู Drizzle Kit utilities. 





---

ููุงุฐุง ูุฐุง ุงูุญู โูุฑุชุงุญโุ

ููุซูู ุฑุณูููุง ูู Drizzle ูููุฑุฉ push/generate/migrate ูููู ุงูุฅุนุฏุงุฏุงุช. 

ุงูุงุณุชุนูุงู ุจู pg ุจุณูุท ููุจุงุดุฑุ ูุชูุฏุฑ ูุงุญููุง ุชุณุชุจุฏูู ุจู Drizzle db.execute(sql\`)` ูู ูุฏูู. 


ูู ูููุฐุช ุงูุฎุทูุงุช ุฃุนูุงู:

ุจูุตูุฑ ุนูุฏู db:push ุดุบูุงู.

ูุนูุฏู ูุธุงู ููุงุฑูุฉ ุณุฑูุน ูุทุจุน ูู ุงููุฑู ุจูู โุงูููุนุฑูู ูู ุงูููุฏโ ูโุงูููุฌูุฏ ูุนูููุง ูู ุงููุงุนุฏุฉโ ูุน ุชูุตูุงุช ุฅุตูุงุญ.


ูุฅู ุงุญุชุฌุช ููุณูุน ุงูููุงุฑูุฉ (ุฃุนูุฏุฉ/ููุงุชูุญ/ููุฑุณุฉ)ุ ุฃูุฏุฑ ุฃุฒููุฏู ูุณุฎุฉ โAdvancedโ ุชูุฑุฃ information_schema.columns ูุชูุงุฑู ุงูุนููุฏ-ุจุงูุนููุฏ.

