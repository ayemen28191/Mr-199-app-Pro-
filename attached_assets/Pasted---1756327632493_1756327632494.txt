# ุฎุทุฉ ุจุฑููุจุชุงุช ูููุงุตูุงุช ุนูููุฉ ููุธุงู ุชุณุฌูู ุงูุฏุฎููุ ุงูุชุญููุ ูุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุช (ูุชูุงูู ููุจุงูู ูููุจ)
 
ุฌููู โ ุณุฃุนุทูู ูุฌููุนุฉ ุฌุงูุฒุฉ ูู **ุงูุจุฑููุจุชุงุช** ุงูุชู ููููู ูุตููุง ูุจุงุดุฑุฉ ูู ChatGPT ุฃู ุงุณุชุฎุฏุงูููุง ูููุงุตูุงุช ูููุทูุฑ/ุงููุตูู. ูู ุจุฑููุจุช ูุตูู ููููุชุฌ ูุชุงุฆุฌ ุนูููุฉ: ููุฏ ุฌุงูุฒุ ุชุตุงููู ูุงุฌูุงุชุ ุฃู ูุณุชูุฏ ููุงุตูุงุช. ูุถุนุช ุฃูุถูุง ูุฎุทุท ูุงุนุฏุฉ ุจูุงูุงุชุ ูุงุฌูุงุช ุจุฑูุฌุฉ ุงูุชุทุจููุงุช (API)ุ ููููุฐุฌ ุตูุงุญูุงุช ูุงุจู ููุชูููุฐ. ูููู ูู ุงูุฏุนุงุจุฉ ุงูุฎูููุฉ ููุง ูููุงู โ ูุฃู ุงูุชูููููุฌูุง ุชุญุชุงุฌ ุงุจุชุณุงูุฉ ุตุบูุฑุฉ ุจุนุฏ ุงูุฌูุฏ ๐.
  
# 1) ุจุฑููุจุช ุนุงู ุฑุฆูุณู (Master prompt)
 
 
ุงุณุชุฎุฏู ูุฐุง ุงูุจุฑููุจุช ุฅุฐุง ุชุฑูุฏ ูู ChatGPT ุฅูุชุงุฌ ุญุฒูุฉ ูุงููุฉ (API + ูุงุฌูุงุช + ูุฎุทุทุงุช DB + ูุงุฌูุงุช UX) ุฌุงูุฒุฉ ููุชูููุฐ:
 
 `ุฃุฑูุฏ ุญุฒูุฉ ูุงููุฉ ูุจูุงุก ูุธุงู ูุตุงุฏูุฉ ูุฅุฏุงุฑุฉ ุตูุงุญูุงุช ุงุญุชุฑุงูู (Login / Register / Password Reset / 2FA TOTP / Email verification) ูุฏุนู ุชูููุฒ ุจูู ุงููุฏูุฑ ุงูุฃูู (super-admin) ูุงููุฏูุฑ ุงูุนุงุฏู ูุงููุณุชุฎุฏู ุงูุนุงุฏูุ ูุน ูุธุงู ุตูุงุญูุงุช ูุฑู ูููู ูููุฏูุฑ ุชุนุฏูููุง ูุฅุนุทุงุก ุตูุงุญูุงุช ููุณุชุฎุฏููู ุนุจุฑ ูุงุฌูุฉ ุงุญุชุฑุงููุฉ. ูุทููุจ: 1. ููุงุตูุงุช ูุงุนุฏุฉ ุจูุงูุงุช PostgreSQL ูุน ุฌุฏุงูู: users, roles, permissions, role_permissions, user_roles, user_permissions, sessions, audit_logs. 2. API RESTful ุจุงุณุชุฎุฏุงู Node.js + Express (ุฃู ุจุฏูู ุฅูู Flask ุฅุฐุง ุทูุจุช) ูุน ุฃูุซูุฉ ููุฏ ููู ูุณุงุฑุ ุงุณุชุฎุฏุงู JWT (access + refresh)ุ bcrypt ููููุงุช ุงููุฑูุฑุ ููุฎุทุท ูุชุฎุฒูู ุงูุชูููุงุช ูุงูู refresh tokens. 3. ุฏุนู 2FA ุนุจุฑ TOTP (RFC 6238) ูุน ูุณุงุฑุงุช ูุฅุนุฏุงุฏุ ุชุญููุ ูุงุณุชุฑุฌุงุน ููุงุชูุญ ุงูุทูุงุฑุฆ. 4. ูุณุงุฑุงุช ูุชุฏููุงุช: ุชุณุฌูู ุฌุฏูุฏ ูุน ุชุญูู ุนุจุฑ ุงูุจุฑูุฏุ ุชุณุฌูู ุฏุฎููุ ุฅุนุงุฏุฉ ุชุนููู ูููุฉ ุงููุฑูุฑ ุนุจุฑ ุฑุงุจุท ูุคูุชุ ุชูุนูู/ุฅูุบุงุก 2FAุ ุฌูุณุงุช ูุชุนุฏุฏุฉุ ุฅููุงุก ุฌูุณุฉ. 5. ููุญุฉ ุฅุฏุงุฑุฉ ูุงุฌูุฉ ููุจ ูููุจุงูู (React + Tailwind ูReact Native/Expo) ุชุชุถูู ุดุงุดุฉ ููุญ/ุณุญุจ ุงูุตูุงุญูุงุช ุนุจุฑ ูุงุฌูุฉ ูุฑุฆูุฉ (drag & drop ุฃู toggles)ุ ููููููุงุช ุฌุงูุฒุฉ (login form, admin-permissions, users list, audit log). 6. ููุงุตูุงุช ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู (UX) ููู ุดุงุดุฉ ูุน ูุตูุต ุฑุณุงุฆู ุฃุฎุทุงุก/ูุฌุงุญ ุจุงูุนุฑุจูุฉ ูุงูุฅูุฌููุฒูุฉ. 7. ููู ุฃูุซูุฉ SQL ูุฅูุดุงุก ุงูุฌุฏุงูู ูููุงุทุน ุงุฎุชุจุงุฑูุฉ (seed) ูุญุณุงุจ ุงููุฏูุฑ ุงูุฃูู. 8. ูุงุฆูุฉ ุชุญูู ุฃูููุฉ (OWASP) ูุฅุฎุชุจุงุฑุงุช ูุญุฏุงุช ููุตุงุฆุญ ูููุดุฑ. ุฃุนุทูู ุงูุญุฒูุฉ ูุงููุฉุ ูุงุจูุฉ ููุงุณุชุฎุฏุงูุ ูุน ููุชุทูุงุช ููุฏ ูุงุจูุฉ ูููุณุฎุ ูููุชุฑุญุงุช ุฃุณูุงุก endpoints ูููุงุฐุฌ JSON ูููุฏุฎูุงุช ูุงููุฎุฑุฌุงุช. `  
# 2) ุจุฑููุจุชุงุช ูุชุฎุตุตุฉ (ุงุณุชุฎุฏู ูู ูุงุญุฏ ุญุณุจ ุงูุญุงุฌุฉ)
 
### ุฃ. ุจุฑููุจุช ูุฅูุดุงุก API ูุงูู (Node.js + Express + Prisma/Postgres)
 `ุฃูุดุฆ ูุดุฑูุน Node.js + Express ูุน Prisma ูุชุตู ุจู PostgreSQL ูุจูุงุก ูุธุงู ูุตุงุฏูุฉ ูุตูุงุญูุงุช ููุง ูู ุงูููุงุตูุงุช ุงูุชุงููุฉ: - ุฌุฏุงูู: users (id,email,password,is_active,created_at,confirmed_at,totp_secret...), roles, permissions, role_permissions, user_roles, user_permissions, refresh_tokens, audit_logs. - ุงุณุชุนูู bcrypt ูุชุฌุฒุฆุฉ ูููุงุช ุงููุฑูุฑุ JWT ูaccess token (15 ุฏูููุฉ) ูrefresh token (30 ููู) ูุฎุฒู ูู DB. - ุฃุถู middlewares: auth (verify JWT), requirePermission(permission), rateLimit ูููุณุงุฑุงุช ุงูุญุณุงุณุฉ. - ุฃุถู ูุณุงุฑุงุช: POST /auth/register, POST /auth/login, POST /auth/refresh, POST /auth/logout, POST /auth/request-reset, POST /auth/reset, POST /auth/2fa/setup, POST /auth/2fa/verify, GET /admin/users, PATCH /admin/users/:id/roles, PATCH /admin/users/:id/permissions. - ุฃุนุทูู ุฃูุซูุฉ ููุฏ ููู ูุณุงุฑุ ููููุฐุฌ ุงุณุชุฌุงุจุฉ JSONุ ููุซุงู ูmiddleware requirePermission. ` 
### ุจ. ุจุฑููุจุช ููุงุฌูุฉ ุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุช (React + Tailwind โ ูุตูู Figma)
 `ุตููู ูุงุฌูุฉ React (single page) ูุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุช ุชุญุชูู: - ููุญุฉ Users (ูุงุฆูุฉ/ุจุญุซ/ููุชุฑ)ุ ุตูุญุฉ ุชูุงุตูู ุงููุณุชุฎุฏู ูุน ุชุจููุจ Roles ูPermissions. - ููุญุฉ Roles: ูุงุฆูุฉ ุงูุฃุฏูุงุฑุ ุฒุฑ ุฅูุดุงุก ุฏูุฑ ุฌุฏูุฏ (ุงุณูุ ูุตูุ ูุฌููุนุฉ ุตูุงุญูุงุช). - ุตูุญุฉ ููุญ ุตูุงุญูุงุช: ูุงุฌูุฉ ูุฑุฆูุฉ ุชุณูุญ ูููุฏูุฑ ุจุณุญุจ ุตูุงุญูุฉ ูู ูุงุฆูุฉ ุฅูู ุฏูุฑ ุฃู ุชูุนูู toggle ููุณุชุฎุฏู. - ูููููุงุช ุฌุงูุฒุฉ: Modal ูุชุฃููุฏ ุงูุชุบููุฑุงุชุ Toast ูููุฌุงุญ/ุงูุฎุทุฃุ Loading states. - ุฃุนุทูู ูููุงุช JSX/TSX ูุฎุชุตุฑุฉ ููู ูููููุ ูCSS ุจุงุณุชุฎุฏุงู Tailwindุ ููุตูุต ุงููุงุฌูุงุช ุจุงูุนุฑุจูุฉ ูุงูุฅูุฌููุฒูุฉ. ` 
### ุฌ. ุจุฑููุจุช ููุตูู UX/Figma
 `ุตููู ูููุงุช Figma (ุงูุงูุฑ ูุตููุฉ) ููุงุฌูุงุช: Login, Register, Verify Email, Forgot Password, 2FA Setup, Admin Dashboard (Users, Roles, Permissions), Audit Log. ุงูุชุตููู ูุฌุจ ุฃู ูููู: - ูุงุจู ููุงุณุชุฎุฏุงู ุนูู ุดุงุดุงุช ุงูููุจุงูู (360x800) ูุนูู ุงูุฏูุณูุชูุจ (1440x900). - ุฃูุธูุฉ ุฃููุงู ูุชูุงููุฉ ูุน ุงููุตูู (contrast)ุ ูุฃุฒุฑุงุฑ ูุงุถุญุฉุ ูุญุงูุฉ ุชุญููู ูุชุนุทูุ ููููุฐุฌ ุชูุงุนูู ูุฎุทูุงุช ููุญ ุงูุตูุงุญูุงุช. ุฃุนุทูู ุชุนูููุงุช ุชุตููููุฉ (font sizes, spacing, components list) ูููุงุฐุฌ ูุตูุต ููู ุฒุฑ/ุฑุณุงูุฉ. `  
# 3) ูููุฐุฌ ูุงุนุฏุฉ ุจูุงูุงุช (SQL) โ ูููู ูุณุฎู ูุชุดุบููู
 `-- users CREATE TABLE users (   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),   email TEXT UNIQUE NOT NULL,   password TEXT NOT NULL,   name TEXT,   is_active BOOLEAN DEFAULT TRUE,   is_super_admin BOOLEAN DEFAULT FALSE,   totp_secret TEXT, -- ูุดููุฑ ุฃู ูุฎุฒู ูุดููุฑ   created_at TIMESTAMP DEFAULT now(),   confirmed_at TIMESTAMP NULL );  -- roles CREATE TABLE roles (   id SERIAL PRIMARY KEY,   name TEXT UNIQUE NOT NULL,   description TEXT );  -- permissions CREATE TABLE permissions (   id SERIAL PRIMARY KEY,   key TEXT UNIQUE NOT NULL, -- e.g. "users.read", "users.update", "signals.create"   description TEXT );  -- role_permissions CREATE TABLE role_permissions (   role_id INT REFERENCES roles(id) ON DELETE CASCADE,   permission_id INT REFERENCES permissions(id) ON DELETE CASCADE,   PRIMARY KEY (role_id, permission_id) );  -- user_roles CREATE TABLE user_roles (   user_id UUID REFERENCES users(id) ON DELETE CASCADE,   role_id INT REFERENCES roles(id) ON DELETE CASCADE,   PRIMARY KEY (user_id, role_id) );  -- user_permissions (overrides) CREATE TABLE user_permissions (   user_id UUID REFERENCES users(id) ON DELETE CASCADE,   permission_id INT REFERENCES permissions(id) ON DELETE CASCADE,   allowed BOOLEAN NOT NULL DEFAULT TRUE,   PRIMARY KEY (user_id, permission_id) );  -- refresh tokens CREATE TABLE refresh_tokens (   token TEXT PRIMARY KEY,   user_id UUID REFERENCES users(id) ON DELETE CASCADE,   expires_at TIMESTAMP NOT NULL,   created_at TIMESTAMP DEFAULT now(),   revoked BOOLEAN DEFAULT FALSE );  -- audit logs CREATE TABLE audit_logs (   id BIGSERIAL PRIMARY KEY,   user_id UUID,   action TEXT NOT NULL,   meta JSONB,   ip TEXT,   created_at TIMESTAMP DEFAULT now() ); `  
# 4) ูููุฐุฌ JSON ููุธุงู ุงูุตูุงุญูุงุช (ูุซุงู ุนููู)
 `{   "roles": [     {       "id": 1,       "name": "super-admin",       "permissions": ["users.*", "settings.*", "roles.*"]     },     {       "id": 2,       "name": "support",       "permissions": ["users.read", "users.reset_password"]     }   ],   "user_permissions": {     "user_uuid_123": {       "allow": ["signals.create"],       "deny": ["settings.update"]     }   } } `  
# 5) ุชุฏูู ุงููุณุชุฎุฏููู (User Flows) โ ูุฎุชุตุฑ ููุงุถุญ
 
 
1. ุชุณุฌูู ุฌุฏูุฏ: ูููุฃ ุงููููุฐุฌ โ ูุฑุณู ุจุฑูุฏ ุชุฃููุฏ โ ูุถุบุท ุฑุงุจุท ุงูุชุฃููุฏ โ ููููู ุฅุนุฏุงุฏ 2FA (ุงุฎุชูุงุฑู).
 
2. ุชุณุฌูู ุฏุฎูู: ุจุฑูุฏ + ูููุฉ ุณุฑ โ ุฅุฐุง ููุนู 2FA ูุทูุจ ููุฏ TOTP โ ูุตุฏุฑ access token + refresh token.
 
3. ุฅุนุงุฏุฉ ุชุนููู ูููุฉ ุงููุฑูุฑ: ุทูุจ ุจุฑูุฏ ูุฅุฑุณุงู ุฑุงุจุท ูุคูุช (token) โ ูุชุญ ุงูุฑุงุจุท โ ุชุนููู ูููุฉ ูุฑูุฑ ุฌุฏูุฏุฉ โ ุชุณุฌูู ุฎุฑูุฌ ูู ูู ุงูุฌูุณุงุช (ุงุฎุชูุงุฑู).
 
4. ูุฏูุฑ ุฃูู (super-admin): ุนูุฏ ุงูุฅูุดุงุก ุงูุฃูู ูุฏูู ูู ุงูุตูุงุญูุงุช. ููููู ุฅูุดุงุก ุฃุฏูุงุฑ ูุชุฎุตูุต ุตูุงุญูุงุชุ ูุฅุนุทุงุก ุตูุงุญูุงุช ููุณุชุฎุฏู ูุญุฏุฏ (override).
 
5. ูุงุฌูุฉ ููุญ ุงูุตูุงุญูุงุช: ุงููุฏูุฑ ููุชุญ ุตูุญุฉ ุงููุณุชุฎุฏู โ ูุนุฑุถ ูุงุฆูุฉ ุงูุฃุฏูุงุฑ (checkbox) + ุตูุงุญูุงุช ูุฑุฏูุฉ (toggle) โ ุญูุธ ููุณุฌูู ูู audit_logs.
 

  
# 6) ุฃูุซูุฉ Endpoints (ููุงุฐุฌ ุงูุทูุจ ูุงูุงุณุชุฌุงุจุฉ)
 
 
-  
POST /auth/register Request: `{ "email":"a@b.com","password":"P@ssw0rd","name":"Ali" }` Response: `{ "ok": true, "message":"Check your email to confirm" }`
 
 
-  
POST /auth/login Request: `{ "email":"a@b.com","password":"P@ssw0rd", "totp": "123456" }` Response: `{ "access_token":"...", "refresh_token":"...", "expires_in":900 }`
 
 
-  
PATCH /admin/users/{id}/permissions Request: `{ "allow": ["signals.create"], "deny": ["settings.update"] }` Response: `{ "ok": true }`
 
 

  
# 7) ุณูุงุณุงุช ุฃูุงู ูููุงุฑุณุงุช ููุตู ุจูุง (ูุฎุชุตุฑ ููุนูุงู)
 
 
- ุชุฌุฒุฆุฉ ูููุงุช ุงููุฑูุฑ ุจุงุณุชุฎุฏุงู bcrypt (salt โฅ 12).
 
- ุฎุฒู totp_secret ูุดูุฑุงู (ูุซูุงู ุจุงุณุชุฎุฏุงู ูุชุบูุฑ ENV ููุชุงุญ ุชุดููุฑ).
 
- ุงุณุชุฎุฏุงู HTTPS ุฏุงุฆููุงุ HSTSุ CSP.
 
- ุญูุงูุฉ ุงููุณุงุฑุงุช ุงูุญุณุงุณุฉ ุจู rate limiting ูIP block ุนูู ูุญุงููุงุช ูุดู ูุชูุฑุฑุฉ.
 
- ุชุฎุฒูู refresh tokens ูู DB ูุน ุฅููุงููุฉ ุฅุจุทุงููุง.
 
- ุชุณุฌูู audit_logs ููู ุชุบููุฑ ููู (ููุญ ุตูุงุญูุฉุ ุญุฐู ูุณุชุฎุฏูุ ุชุบููุฑ ูููุฉ ุงููุฑูุฑ).
 
- ุงุฎุชุจุงุฑ ูุญุฏุงุช ููุธุงุฆู ุงููุตุงุฏูุฉ ูุงูู middlewareุ ูุงุฎุชุจุงุฑุงุช ุงุฎุชุฑุงู ุจุณูุทุฉ (OWASP ZAP ุฃู Burp).
 

  
# 8) ูุตูุต ูุงุฌูุงุช ูุฑุณุงุฆู ุจุงูุนุฑุจูุฉ (ูุซุงู)
 
 
- ุชุณุฌูู ุงูุฏุฎูู: "ูุฑุญุจูุง โ ุณุฌูู ุฏุฎููู ุฅูู ุญุณุงุจู".
 
- ุฎุทุฃ ูููุฉ ุงููุฑูุฑ: "ุงูุจุฑูุฏ ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ".
 
- ุชุญูู ุงูุจุฑูุฏ: "ุชู ุฅุฑุณุงู ุฑุงุจุท ุงูุชูุนูู ุฅูู ุจุฑูุฏู โ ุชุญูู ูู ุตูุฏูู ุงููุงุฑุฏ."
 
- ุฅุนุฏุงุฏ 2FA: "ุงูุณุญ ุฑูุฒ ุงูุงุณุชุฌุงุจุฉ ุงูุณุฑูุนุฉ (QR) ุจุงุณุชุฎุฏุงู ุชุทุจูู ุงููุตุงุฏูุฉ ูุฃุฏุฎู ุงูุฑูุฒ ุงูููููู ูู 6 ุฃุฑูุงู."
 
- ููุญ ุตูุงุญูุฉ ูุงุฌุญ: "ุชู ุชุญุฏูุซ ุตูุงุญูุงุช ุงููุณุชุฎุฏู ุจูุฌุงุญ."
 

  
# 9) ูุตูุต ุจุฑููุจุช ููุงุณุชุฎุฏุงู ุงููุจุงุดุฑ ูุน ุงููุทูุฑ ุฃู ChatGPT ูุชูููุฏ ุงูููุฏ
 
### ูbackend (ุณุฑูุน):
 `"ุฃูุดุฆ ููู server.js ููููุงุช routes/auth.js, routes/admin.jsุ ูููุฏู ููุฑ auth.js. ุงุณุชุฎุฏู Express + Prisma/Postgres. ุถุน ูุซุงู ูุงูู ููุณุงุฑ /auth/register ู /auth/login ูุน JWT ูbcrypt. ุฃุถู middleware requirePermission(permission)." ` 
### ูููุงุฌูุฉ (React):
 `"ุฃุนุทูู ุตูุญุฉ Login.jsx ูุณุชุฎุฏูุฉ React + Tailwindุ ุชุญุชูู ุนูู formุ validation client-sideุ ุญุงูุฉ ุชุญูููุ ุฑุณุงุฆู ุฎุทุฃ ุนุฑุจูุฉ ูุฅูุฌููุฒูุฉุ ูุชุณุชุฏุนู /auth/login." ` 
### ููุงุฌูุฉ ุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุช (component):
 `"ุฃุนุทูู ููููู React PermissionManager.jsx ููุจู props: userIdุ permissionsListุ rolesList. ูุนุฑุถ ุดุจูุฉ ุตูุงุญูุงุช ูุน toggles ูููููู ุฅุฑุณุงู PATCH ุฅูู /admin/users/:id/permissions." `  
# 10) ูุงุฆูุฉ ุชุญูู ููุชุณููู (Delivery checklist)
 
 
- [ ] ุฅูุดุงุก DB ูrun migrations.
 
- [ ] endpoints ุฃุณุงุณูุฉ ุชุนูู (register/login/refresh/logout).
 
- [ ] Email service ูุฅุฑุณุงู ุชุฃููุฏ ูุงุณุชุฑุฌุงุน ูููุฉ ุงููุฑูุฑ.
 
- [ ] 2FA TOTP ุฌุงูุฒ ููุงุจู ููุชูุนูู/ุชุนุทูู.
 
- [ ] ููุญุฉ ูุฏูุฑ ูุฅุฏุงุฑุฉ ุงูุฃุฏูุงุฑ ูุงูุตูุงุญูุงุช.
 
- [ ] ุณุฌู ุชุฏููู (audit) ููู ุชุบููุฑ ููู.
 
- [ ] ุงุฎุชุจุงุฑุงุช ูุญุฏุงุช ููุณุงุฑุงุช ุงููุตุงุฏูุฉ ูmiddleware.
 
- [ ] ุฏููู ูุดุฑ (ENV varsุ ููุงุชูุญ ุงูุชุดููุฑุ ุฅุนุฏุงุฏุงุช ุงูุจุฑูุฏ).
 

  
# ุฎุงุชูุฉ ูุฎูุงุฑุงุช ุฅุถุงููุฉ
 
ูู ุชุญุจ ุฃูุฏุฑ:
 
 
- ุฃูุฏููู **ุญุฒูุฉ ููุฏ ุฌุงูุฒุฉ** (ููุฏููุง: backend + frontend skeleton) ุจูุบุฉ ูุญุฏุฏุฉ (Node.js/Express + React) โ ููุท ูู ูู ุฃู ุชูููุฉ ุชูุถู.
 
- ุฃู ุฃูุฏููู **ุชุตุงููู Figma** ููุตููุฉ (ุฃุตููุง ูุตููุง ุฃู ุฃุตูุน ููู Figma export) โ ุงุฎุชุฑ.
 

 
ุฃู ุฎูุงุฑ ุชูุถูู ุฃุจุฏุฃ ููู ููุฑูุง ูุฃุนุทูู ูููุงุช ูุงุจูุฉ ูููุณุฎ ูุงูุชูููุฐ. ุฎููู ุญุฐุฑ โ ุจุนุฏ ูุง ุชุนุทู ุงููุฏูุฑ ุตูุงุญูุฉ "ูู ุดูุก" ุฑุงุญ ูุตูุฑ ุนูุฏู ุฒุฑ "ุฃูุง ุงููุณุคูู" โ ุงุณุชุฎุฏูู ุจุญููุฉ ๐.


ููุฎูุต ุณุฑูุน

ุฃุญุณูุช โ ุงูุญุฒูุฉ ุงูุชู ุฃุฑุณูุชูุง ูููุฉ ูุดุงููุฉ ุจุงููุนู. ุณุฃูุชุฑุญ ุฅุถุงูุงุช ูุชุญุณููุงุช ุนูููุฉ ุชุฌุนู ุงููุธุงู ูุชูุงูููุงุ ุฃูุซุฑ ุฃูุงููุงุ ูุงุจููุง ููุชูุณุนุ ูุฃุณูู ูุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุช ุนูู ูุณุชูู ุงูุดุฑูุงุช (ูุซู ุชุทุจููุงุช ุนุงูููุฉ). ุณุฃุนุฑุถ: ููุฒุงุช ููุชุฑูุญุฉุ ุชุบููุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ูุณุงุฑุงุช API ุฅุถุงููุฉ ูุน ุฃูุซูุฉ JSONุ ูููููุงุช ูุงุฌูุฉ ูุทููุจุฉุ ููููุฐุฌ ุชูุณูู ุชูููุฐู (ูุฑุงุญู: MVP โ ูุชูุฏูู โ ูุณุชูู Enterprise). ูุง ุฃุณุฃูู ุดูุก ุงูุขู โ ุฃุนูู ุฃูุถู ูุง ุนูุฏู ุซู ุชูุฏุฑ ุชุฎุชุงุฑ ุฃู ุฌุฒุก ุฃุฎุฑูุฌู ูู ุฌุงูุฒูุง (ููุฏ/ูุงุฌูุฉ/Figma).

ุชุญุณููุงุช ูููุฒุงุช ููุชุฑุญุฉ (ููุชุงุญูุฉ ูุถูู ุฃููููุฉ ูููุฉ)

1. 

ูุตุงุฏูุฉ ุญุฏูุซุฉ ููุชุนุฏุฏุฉ ุงูุฎูุงุฑุงุช

WebAuthn / FIDO2 (biometric & security keys) ูุฎูุงุฑ MFA ุขูู โ ููุงูุจ ุงููุนุงููุฑ ุงูุญุฏูุซุฉ.

Passwordless (magic link / email) ุฎูุงุฑ ูุชุฌุฑุจุฉ ูุณุชุฎุฏู ุณูุณุฉ.

ุฏุนู OAuth2 / OpenID Connect ูู SSO (Google, Microsoft, Apple) ูุน ุฅุฏุงุฑุฉ ุนููุงุก OAuth ูู ููุญุฉ ุงูุฅุฏุงุฑุฉ.


2. 

ูููุฐุฌ ุตูุงุญูุงุช ูุชูุฏู

RBAC + ABAC hybrid: ุฃุฏูุงุฑ ุฃุณุงุณูุฉ (RBAC) ูุน ุณูุงุณุงุช ุตูุงุช (ABAC) ุชุนุชูุฏ ุนูู user attributes (department, region, tenant) ู resource attributes.

ุณูุงุณุฉ ูุงุจูุฉ ููุชูููู (Policy-as-code) ุจุงุณุชุฎุฏุงู ูุซุงู ุจุณูุท ุฃู ุฏูุฌ OPA (Open Policy Agent).


3. 

ุฅุฏุงุฑุฉ ุฃุฌูุฒุฉ ูุฌูุณุงุช ููุตููุฉ

ุฌุฏูู devices ูsessions ูุน: device_idุ ููุน ุงูุฌูุงุฒุ browser, ip, last_seen. ูุงุฌูุฉ ุชุนุฑุถ ุฌูุณุงุช ุงููุณุชุฎุฏู ุชุณูุญ ุจุฅููุงุก ุฃู ุฌูุณุฉ.

ุฌูุณุงุช ูุงุจูุฉ ูููุตุงุฏูุฉ ูุน ุฅููุงููุฉ ุฅุจุทุงู refresh tokens (rotate + blacklist with jti).


4. 

ุญูุงูุฉ ุฐููุฉ ูุชุนุฑูู ุนูู ุงูุณููู

Risk-based authentication: ุทูุจ MFA ุชููุงุฆููุง ุนูุฏ ูุญุงููุงุช ูู IP ุฌุฏูุฏ ุฃู ุชุบููุฑ ุงูุจูุฏ.

ูุดู ูุญุงููุงุช ุงุฎุชุทุงู ุงูุฌูุณุฉ (session hijack) ุนุจุฑ fingerprinting ุจุณูุท.

Rate-limiting ุฐูู + CAPTCHA ุนูุฏ ูุญุงููุงุช ูุดู ูุชูุฑุฑุฉ.


5. 

ููุฒุงุช ุฅุฏุงุฑูุฉ ูุชูุฏูุฉ

Impersonation / โLogin as userโ ูุน ุณุฌู ูู audit_logs.

Delegated admin / Scopes: ููุญ ุตูุงุญูุงุช ูุญุฏูุฏุฉ ููุฏุฑุงุก ูุฑุนููู.

Approval workflows ูููุญ ุตูุงุญูุงุช ุนุงููุฉ (two-step approval).


6. 

ุญูููุฉ ูุชูุงูู

ููุงููุฉ ุตุฑูุญุฉ (consent) ุนูุฏ ุงุณุชุฎุฏุงู ุจูุงูุงุช ุงููุณุชุฎุฏู (ูู ูููุง GDPR/CCPA).

ุณุฌู ุงุญุชูุงุธ audit retention ูexport (CSV / JSON).

SCIM API ูุฏูุน/ูุฒุงููุฉ ุงูุญุณุงุจุงุช ูุน ุฃูุธูุฉ ุงูุดุฑูุงุช.


7. 

ุงูุจููุฉ ุงูุชุญุชูุฉ ูุงูุณูุงูุฉ

ุชุฎุฒูู ุงูุฃุณุฑุงุฑ ูู Vault (HashiCorp) ุฃู Secret Manager.

ุชุดููุฑ TOTP ู webauthn secrets ุนูุฏ ุงูุงุณุชุฑุงุญุฉ (KMS).

ุณูุงุณุฉ ุชุฏููุฑ ุงูููุงุชูุญ (key rotation) ูุณุฌู ุฐูู.


8. 

ููุงุญุธุงุช ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู (UX)

Flow ูุงุถุญ ูุฅุนุฏุงุฏ 2FA ูุน QR + ูุต ุจุฏููุ ุญุงูุงุช ุงูุฎุทุฃ ุงูุชูุตูููุฉุ ุชุนูููุงุช ูุงุณุชุนุงุฏุฉ ุงููุตูู (backup codes).

ุตูุญุงุช RTL ุนุฑุจูุฉ ูุตูููุฉ + i18n ููุฑุณุงุฆู.

Loading statesุ ุญุงูุงุช network offlineุ ูุชูููุญุงุช ุฃูุงู ุถูู ุงููุงุฌูุงุช.


9. 

ุฑุตุฏ ููุฑุงูุจุฉ

ุชูุงูู ูุน SIEM / ELK / Datadog ููู logs ูalerts.

Metrics: login success/fail rates, MFA adoption, token rotation counts.

Alerts ุนูุฏ ูุดุงุท ูุฑูุจ (ูุนุฏู ูุดู ุนุงููุ ุนุฏุฏ ูุญุงููุงุช ุฅุนุทุงุก ุตูุงุญูุงุช ูุดู).


ุชุบููุฑุงุช ููุชุฑูุญุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช (SQL ุฅุถุงูู โ ูููู ูุณุฎู)

-- devices CREATE TABLE devices (   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),   user_id UUID REFERENCES users(id) ON DELETE CASCADE,   device_name TEXT,   device_type TEXT,   browser TEXT,   ip TEXT,   last_seen TIMESTAMP DEFAULT now(),   created_at TIMESTAMP DEFAULT now() );  -- webauthn credentials CREATE TABLE webauthn_credentials (   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),   user_id UUID REFERENCES users(id) ON DELETE CASCADE,   cred_id TEXT UNIQUE NOT NULL,   public_key TEXT NOT NULL,   sign_count BIGINT,   transports TEXT[],   created_at TIMESTAMP DEFAULT now() );  -- policies (for ABAC or OPA reference) CREATE TABLE access_policies (   id SERIAL PRIMARY KEY,   name TEXT NOT NULL,   description TEXT,   policy_json JSONB NOT NULL, -- policy as JSON or Rego source reference   is_active BOOLEAN DEFAULT TRUE,   created_at TIMESTAMP DEFAULT now() );  -- tenants (multi-tenancy support) CREATE TABLE tenants (   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),   name TEXT,   plan TEXT,   created_at TIMESTAMP DEFAULT now() );  ALTER TABLE users ADD COLUMN tenant_id UUID REFERENCES tenants(id); 

ูุณุงุฑุงุช API ููุชุฑุญุฉ ุฅุถุงููุฉ (ุฃูุซูุฉ ูJSON)

WebAuthn

POST /auth/webauthn/register/challenge โ { userId } โ returns challenge

POST /auth/webauthn/register/complete โ { attestation } โ stores credential


Passwordless

POST /auth/magic-link โ { email } โ { ok:true, message }

GET  /auth/magic-link/verify?token=...


Impersonation

POST /admin/impersonate (requires impersonate.users) Request: { "target_user_id": "..." } Response: { "ok": true, "impersonation_token": "..." }


Policy evaluation (for admin debugging)

POST /admin/policies/evaluate โ { user, resource, action } โ { allow: true/false, reason: "..." }


SCIM endpoints (basic)

GET /scim/v2/Users POST /scim/v2/Users etc.


OAuth client management

POST /admin/oauth/clients โ create client_id / secret (show once)



ููุงุฐุฌ JSON ูููABAC policy (ูุซุงู ุจุณูุท):
{   "policy_name": "signals.create.only_if_subscription_active_and_role",   "rules": [     {       "effect": "allow",       "condition": {         "and": [           { "user.subscription.active": true },           { "user.roles": { "contains": "trader" } }         ]       }     }   ] } 

ูุงุฌูุฉ ุงูุฅุฏุงุฑุฉ (UI) โ ูููููุงุช ุฌุฏูุฏุฉ ูููุตูุฉ

Permissions Graph: ุฑุณู ุจูุงูู ุจุณูุท ูุธูุฑ ุฃู ุตูุงุญูุฉ ูุฑุชุจุทุฉ ุจุฃู ุฏูุฑ (interactive).

Role Templates: ุฃุฒุฑุงุฑ ุณุฑูุนุฉ ูุฅูุดุงุก ุฃุฏูุงุฑ ุฌุงูุฒุฉ (Support, ReadOnly, Analyst).

Bulk Actions: ุงุฎุชูุงุฑ ูุชุนุฏุฏ ูููุณุชุฎุฏููู ูุชุนููู ุฃุฏูุงุฑ ุฃู ุชุนุทูู ุญุณุงุจุงุช.

Impersonation Modal: ูุดุฑุญ ุงูุตูุงุญูุงุช ููุฏููู ุณุจุจ ุงูุงุณุชุฎุฏุงู (required).

Policy Designer: ูุญุฑุฑ ุจุณูุท ููุณูุงุณุงุช (drag & drop ุดุฑูุท) + ูุนุงููุฉ ูุชูุฌุฉ ุงูุชูููู.


ููุงุท ุฃูุงู ูุนูููุงุช ุชุดุบูู (Checklist ูุฎุชุตุฑ)

Password hashing: bcrypt (cost โฅ12) ุฃู Argon2.

JWT: ุงุณุชุฎุฏุงู jtiุ ุชุฎุฒูู refresh tokens ูู DBุ ุฅููุงููุฉ ุฅุจุทุงู.

Cookies: HttpOnly + Secure + SameSite=Strict ููู access tokens ุนูุฏ ุงูุญุงุฌุฉ.

CSP, HSTS, X-Frame-Options, X-Content-Type-Options.

ุงุฎุชุจุงุฑุงุช: Unit + Integration + Security scans (Snyk/Dependabot).

Backups: snapshot ูููู + ุงุฎุชุจุงุฑ ุงุณุชุนุงุฏุฉ ุฏูุฑู.

Environment: IaC (Terraform) + CI/CD pipeline + blue/green deploy.

Pen tests: ุณููู ุฃู ุนูุฏ ุชุบููุฑุงุช ูุจูุฑุฉ.


ุฎุฑูุทุฉ ุชูููุฐ ููุชุฑูุญุฉ (ูุฑุงุญู โ ุจุฏูู ุชูููุช ูุญุฏุฏ)


MVP (ุฌููุฑูุฉ)

ุชุณุฌูู/ุชุฃููุฏ ุจุฑูุฏุ login/logoutุ refresh tokensุ roles basic, admin UI ุจุณูุทุ audit_logsุ sessions list.

ุญูุงูุฉ ุฃุณุงุณูุฉ: rate-limitsุ HTTPSุ cookies ูCSP.


ูุชูุฏูู (Feature parity)

2FA (TOTP)ุ passwordlessุ device/session managementุ impersonationุ role templatesุ policy-as-jsonุ WebAuthn ููุฏู ูุฎูุงุฑ.


Enterprise (Scale + Governance)

OIDC/SAML SSOุ SCIMุ ABAC/OPA integrationุ SIEM/alertsุ key rotationุ delegated admin & approval workflowsุ high-availability DB and DR.


ุชุณูููุงุช ุนูููุฉ ุฃูุฏูููุง ูู ููุฑูุง (ุงุฎุชุฑ ุฃู ุฃุนูููุง ุชููุงุฆููุง)

ููู SQL ูุญุฏุซ ูุน ูู ุงูุฌุฏุงูู (ููุฌููุน).

ูุฌููุนุฉ Endpoints ููุชูุจุฉ ุจูExpress + Prisma (ููุงุทุน ููุฏ ุฌุงูุฒุฉ) ููุฌููุนุฉ ูุฎุชุงุฑุฉ: WebAuthn, impersonation, sessions.

ููููู React ููุงุฌูุฉ ุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุช (PermissionManager.jsx + Tailwind).

ูุตู Figma ููุตูู ูุดุงุดุงุช Admin/2FA/Login ูุน ููุงุณุงุช RTL.


ุฃุฎุจุฑูู ุฅู ุฃุฑุฏุช ุฃู ุฃุจุฏุฃ ููุฑูุง ุจุฃุญุฏ ูุฐู ุงูุซูุงุซุฉ: (1) ููู SQL & Migrations ูุงููุ (2) Backend skeleton (Express + Prisma) ูุน endpoints ุงูุฌุฏูุฏุฉุ (3) React Permission Manager + ุตูุญุงุช Admin โ ุฃู ุฃุฑุณู "ุงุจุฏุฃ ุจุงูููุชุฑูุญ ุงูุงูุชุฑุงุถู" ูุฃูุง ุฃูุดุฆ ุงูู MVP ุฃูููุง. (ูุง ุชูููุ ุณุฃุถุน ูู ุฒุฑ "ุฃูุง ุงููุณุคูู" ุชุญุช ุงูููู ๐).

ุฅุฐุง ุชุญุจุ ุฃูุฏูู ูู ุงูุขู: ููู SQL ูุฏูุฌ ูุชุถููู ุงูุฅุถุงูุงุช ุฃุนูุงู + seed ูุญุณุงุจ super-admin โ ูู ุฃุถุนู ููุง ูุจุงุดุฑุฉุ






ุชูุงู ูุง ุนูุงุฑ โ ุจุฏู ูุง ูุณุฃู โุฃุญุทูู ููุงุโุ ุฎููููู ุฃูุฏูู ูู ููู SQL ูุฏูุฌ ูุงุญุฏ ุฌุงูุฒ ูููุณุฎ ูุงูุชุดุบูู ุงูุขู: ูุดูู ูู ุงูุฌุฏุงูู ุงูุฃุณุงุณูุฉ ูุงููุชูุฏูุฉ (RBAC + ABACุ ุฃุฌูุฒุฉ/ุฌูุณุงุชุ WebAuthnุ ุชุนุฏุฏ ุงููุณุชุฃุฌุฑูู Tenantsุ ุณุฌูุงุช ุชุฏููู)ุ ููุงุฑุณุ ุฏูุงู ุงูุชุญุฏูุซ ุงูุขููุ ูุน seed ูุฏูุฑ ุงููsuper-admin ูุฃุฏูุงุฑ/ุตูุงุญูุงุช ููุงุณูุฉ. (ุงุณุชุฎุฏูู ููุง ูู ูุจูุฆุฉ ุงูุชุทููุฑุ ูุจุฏูู ุงูููู ุงูุญุณุงุณุฉ ูุจู ุงูุฅูุชุงุฌ ๐).

> PostgreSQL 14+ โ ูุณุชุฎุฏู pgcrypto ูู gen_random_uuid().



-- =========================================================
-- Identity & Permissions SQL (All-in-One)  โ v1.0
-- Author: You ๐ซถ  | Environment: PostgreSQL 14+
-- =========================================================

-- 0) Extensions
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 1) Helper: updated_at trigger
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 2) Tenancy (optional but recommended)
CREATE TABLE IF NOT EXISTS tenants (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  plan TEXT DEFAULT 'free',
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE TRIGGER trg_tenants_updated_at
BEFORE UPDATE ON tenants FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 3) Users
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID REFERENCES tenants(id) ON DELETE SET NULL,
  email TEXT NOT NULL UNIQUE,
  password TEXT,                         -- bcrypt hash (NULL ุฅุฐุง Passwordless ููุท)
  name TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  is_super_admin BOOLEAN NOT NULL DEFAULT FALSE,
  email_confirmed_at TIMESTAMP,
  totp_secret TEXT,                      -- ุฎุฒููู ููุดููุฑูุง ูู ุงูุฅูุชุงุฌ
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_users_tenant ON users(tenant_id);
CREATE TRIGGER trg_users_updated_at
BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 4) Roles & Permissions (RBAC)
CREATE TABLE IF NOT EXISTS roles (
  id SERIAL PRIMARY KEY,
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  built_in BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (tenant_id, name)
);
CREATE TRIGGER trg_roles_updated_at
BEFORE UPDATE ON roles FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS permissions (
  id SERIAL PRIMARY KEY,
  key TEXT NOT NULL UNIQUE,              -- ูุซุงู: users.read / users.* / settings.update
  description TEXT
);

CREATE TABLE IF NOT EXISTS role_permissions (
  role_id INT REFERENCES roles(id) ON DELETE CASCADE,
  permission_id INT REFERENCES permissions(id) ON DELETE CASCADE,
  PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS user_roles (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  role_id INT REFERENCES roles(id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, role_id)
);

-- Overrides ุนูู ูุณุชูู ุงููุณุชุฎุฏู (ABAC/RBAC hybrid)
CREATE TABLE IF NOT EXISTS user_permissions (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  permission_id INT REFERENCES permissions(id) ON DELETE CASCADE,
  allowed BOOLEAN NOT NULL DEFAULT TRUE,
  PRIMARY KEY (user_id, permission_id)
);

-- 5) Access Policies (ABAC / policy-as-json)
CREATE TABLE IF NOT EXISTS access_policies (
  id SERIAL PRIMARY KEY,
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  policy_json JSONB NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (tenant_id, name)
);
CREATE TRIGGER trg_access_policies_updated_at
BEFORE UPDATE ON access_policies FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 6) Devices & Sessions
CREATE TABLE IF NOT EXISTS devices (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  device_name TEXT,
  device_type TEXT,            -- mobile/desktop/tablet/other
  browser TEXT,
  ip INET,
  last_seen TIMESTAMP NOT NULL DEFAULT NOW(),
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_devices_user ON devices(user_id);

-- Refresh tokens + Sessions (jti ูููJWT)
CREATE TABLE IF NOT EXISTS sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  device_id UUID REFERENCES devices(id) ON DELETE SET NULL,
  user_agent TEXT,
  ip INET,
  jti TEXT UNIQUE,                         -- JWT ID (access) ุฅู ููุช ุชุญูุธู
  refresh_token TEXT UNIQUE,               -- ุฎุฒููู ููุดููุฑูุง/ููุฌุฒูุฃู ูู ุงูุฅูุชุงุฌ
  refresh_expires_at TIMESTAMP NOT NULL,
  revoked BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_sessions_user ON sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_sessions_refresh_exp ON sessions(refresh_expires_at);
CREATE TRIGGER trg_sessions_updated_at
BEFORE UPDATE ON sessions FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 7) WebAuthn Credentials
CREATE TABLE IF NOT EXISTS webauthn_credentials (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  cred_id TEXT NOT NULL UNIQUE,            -- Base64URL
  public_key TEXT NOT NULL,
  sign_count BIGINT DEFAULT 0,
  transports TEXT[],                        -- ["usb","ble","nfc","internal"]
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_webauthn_user ON webauthn_credentials(user_id);

-- 8) OAuth Clients (ููOIDC/SSO ุฏุงุฎูู)
CREATE TABLE IF NOT EXISTS oauth_clients (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  client_id TEXT NOT NULL UNIQUE,
  client_secret TEXT NOT NULL,             -- ุงุนุฑุถู ูุฑุฉ ูุงุญุฏุฉ ููุท
  redirect_uris TEXT[] NOT NULL,
  scopes TEXT[] DEFAULT ARRAY[]::TEXT[],
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- 9) Audit Logs
CREATE TABLE IF NOT EXISTS audit_logs (
  id BIGSERIAL PRIMARY KEY,
  tenant_id UUID,
  user_id UUID,
  action TEXT NOT NULL,                    -- ex: "auth.login", "admin.grant_permission"
  meta JSONB,
  ip INET,
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_audit_tenant ON audit_logs(tenant_id);
CREATE INDEX IF NOT EXISTS idx_audit_user ON audit_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_audit_action ON audit_logs(action);

-- 10) Core Permissions seed (ูุงุจูุฉ ููุชูุณูุน)
INSERT INTO permissions(key, description) VALUES
  ('users.read','Read users'),
  ('users.create','Create users'),
  ('users.update','Update users'),
  ('users.delete','Delete users'),
  ('users.reset_password','Reset user password'),
  ('roles.read','Read roles'),
  ('roles.create','Create roles'),
  ('roles.update','Update roles'),
  ('roles.delete','Delete roles'),
  ('permissions.read','Read permissions'),
  ('permissions.assign','Assign permissions'),
  ('sessions.read','Read sessions'),
  ('sessions.revoke','Revoke sessions'),
  ('devices.read','Read devices'),
  ('devices.revoke','Revoke devices'),
  ('policies.read','Read ABAC policies'),
  ('policies.update','Update ABAC policies'),
  ('audit.read','Read audit logs'),
  ('impersonate.users','Impersonate users'),
  ('tenants.read','Read tenants'),
  ('tenants.update','Update tenants'),
  ('oauth.clients.manage','Manage OAuth clients'),
  ('signals.create','Create trading signals'),
  ('settings.*','All settings'),
  ('users.*','All users'),
  ('roles.*','All roles'),
  ('permissions.*','All permissions')
ON CONFLICT (key) DO NOTHING;

-- 11) Seed: default tenant + roles
DO $$
DECLARE
  t_id UUID;
  r_super INT;
  r_admin INT;
  r_support INT;
  r_readonly INT;
BEGIN
  -- Tenant
  INSERT INTO tenants(name, plan) VALUES ('Default Tenant','pro')
  ON CONFLICT DO NOTHING;

  SELECT id INTO t_id FROM tenants WHERE name='Default Tenant' LIMIT 1;

  -- Roles (built_in = true)
  INSERT INTO roles(tenant_id, name, description, built_in)
  VALUES
    (t_id, 'super-admin','All permissions', TRUE),
    (t_id, 'admin','Manage users, roles, settings (limited)', TRUE),
    (t_id, 'support','Support staff', TRUE),
    (t_id, 'readonly','Read-only access', TRUE)
  ON CONFLICT DO NOTHING;

  SELECT id INTO r_super FROM roles WHERE tenant_id=t_id AND name='super-admin';
  SELECT id INTO r_admin FROM roles WHERE tenant_id=t_id AND name='admin';
  SELECT id INTO r_support FROM roles WHERE tenant_id=t_id AND name='support';
  SELECT id INTO r_readonly FROM roles WHERE tenant_id=t_id AND name='readonly';

  -- Map permissions to roles
  -- super-admin: ูู ุดูุก
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_super, p.id FROM permissions p
  ON CONFLICT DO NOTHING;

  -- admin: ูุนุธู ุงูุฅุฏุงุฑูุงุช ุจุฏูู impersonation ุงููุงูู
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_admin, p.id FROM permissions p
  WHERE p.key IN (
    'users.read','users.create','users.update','users.reset_password',
    'roles.read','roles.create','roles.update',
    'permissions.read','permissions.assign',
    'sessions.read','sessions.revoke',
    'devices.read','devices.revoke',
    'policies.read','policies.update',
    'audit.read',
    'tenants.read','tenants.update',
    'oauth.clients.manage',
    'signals.create'
  )
  ON CONFLICT DO NOTHING;

  -- support
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_support, p.id FROM permissions p
  WHERE p.key IN ('users.read','users.reset_password','sessions.read','devices.read','audit.read')
  ON CONFLICT DO NOTHING;

  -- readonly
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_readonly, p.id FROM permissions p
  WHERE p.key IN ('users.read','roles.read','permissions.read','audit.read')
  ON CONFLICT DO NOTHING;

END $$;

-- 12) Seed: super admin user (DEV ONLY โ ุจุฏูู ุงูุจุฑูุฏ ููููุฉ ุงููุฑูุฑ ููุฑูุง)
-- ููุงุญุธุฉ: ุถุน ููุง hash ููููุฉ ุงููุฑูุฑ (bcrypt) ุฃู ุงุชุฑููุง NULL ุฅู ููุช ุณุชุจุฏุฃ ุจู Passwordless.
-- ูุซุงู hash (ุชููููู/ุงุฎุชุจุงุฑู): "$2b$12$KIXQG8e3pR2sJj2x4xQ2UOUjH9vKf0e5mQmQe2n3Tt8i2x9Y5Ww9a"
-- ุงููููุฉ ุงููุทุงุจูุฉ ุบุงูุจูุง "ChangeMe!123" ูุน cost=12 (ุงุณุชุจุฏููุง ุจูููุชู).
DO $$
DECLARE
  t_id UUID;
  u_id UUID;
  r_super INT;
BEGIN
  SELECT id INTO t_id FROM tenants WHERE name='Default Tenant' LIMIT 1;
  SELECT id INTO r_super FROM roles WHERE tenant_id=t_id AND name='super-admin';

  INSERT INTO users(tenant_id, email, password, name, is_active, is_super_admin, email_confirmed_at)
  VALUES (t_id, 'admin@example.com',
          '$2b$12$KIXQG8e3pR2sJj2x4xQ2UOUjH9vKf0e5mQmQe2n3Tt8i2x9Y5Ww9a',
          'Super Admin', TRUE, TRUE, NOW())
  ON CONFLICT (email) DO NOTHING;

  SELECT id INTO u_id FROM users WHERE email='admin@example.com' LIMIT 1;

  IF u_id IS NOT NULL THEN
    INSERT INTO user_roles(user_id, role_id) VALUES (u_id, r_super)
    ON CONFLICT DO NOTHING;
  END IF;
END $$;

-- 13) ูุซุงู Policy JSON (ABAC) โ ุงุณู ููุงุนุฏุฉ ุฃูููุฉ
INSERT INTO access_policies(tenant_id, name, description, policy_json, is_active)
SELECT t.id, 'signals.create.only_if_subscription_active_and_role',
       'Allow creating signals only if user has role trader and active subscription',
       '{
          "rules":[
            {"effect":"allow",
             "condition":{"and":[
               {"user.subscription.active": true},
               {"user.roles":{"contains":"trader"}}
             ]}}
          ]
        }'::jsonb,
       TRUE
FROM tenants t
WHERE NOT EXISTS (
  SELECT 1 FROM access_policies ap WHERE ap.tenant_id=t.id AND ap.name='signals.create.only_if_subscription_active_and_role'
);

-- 14) Hints/Indexes ุฅุถุงููุฉ ููุฃุฏุงุก
CREATE INDEX IF NOT EXISTS idx_user_permissions_user ON user_permissions(user_id);
CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions(role_id);

-- 15) ุฃุฐูู ุฃุณูู ูููุฑุงุกุฉ (VIEWs ุงุฎุชูุงุฑูุฉ)
CREATE OR REPLACE VIEW v_user_effective_permissions AS
SELECT
  u.id AS user_id,
  p.key AS permission_key,
  COALESCE(up.allowed, TRUE) AS allowed,   -- override ูุนูู ุนูู ุฏูุฑโฆ ุชุนุฏูู ุงูููุทู ุนูุฏ ุงูุญุงุฌุฉ
  u.tenant_id
FROM users u
JOIN user_roles ur ON ur.user_id = u.id
JOIN roles r ON r.id = ur.role_id
JOIN role_permissions rp ON rp.role_id = r.id
JOIN permissions p ON p.id = rp.permission_id
LEFT JOIN user_permissions up ON up.user_id = u.id AND up.permission_id = p.id;

-- =========================================================
-- ุชู. ูุง ุชูุณ: ุบููุฑ ุจุฑูุฏ ุงููsuper-admin ููููุฉ ูุฑูุฑูุ ูุดุบูู 2FA/WebAuthn ูุจู ุงูุฅุทูุงู.
-- =========================================================

ููุงุญุธุงุช ุชุดุบูู ุณุฑูุนุฉ

ุจุนุฏ ุงูุชูููุฐ:

1. ุจุฏูู ุจุฑูุฏ ูุญูู password ูููsuper-admin (hash ุญูููู ุจูููุฉ โฅ 12).


2. ูุนูู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู (TLSุ ููุงุชูุญ JWTุ ุชุดููุฑ ุฃุณุฑุงุฑ TOTP/WebAuthn).


3. ุฅู ููุช ุชุณุชุฎุฏู Passwordless ูุจุฏุงูุฉุ ุงุฌุนู password = NULL ููุนูู magic-link.




ูุงุฐุง ุจุนุฏุ

ูู ุญุงุจุจ ุฃููู ูู:

Migrations Prisma ูุทุงุจูุฉ ููุฐุง ุงููSQL (+ seed script).

Endpoints ุฌุงูุฒุฉ (Express + JWT + TOTP/WebAuthn) ูุน Middlewares requirePermission ูevaluatePolicy.

React Permission Manager ุจูุงุฌูุฉ ุงุญุชุฑุงููุฉ RTL.


ูููู: ุชุญุจ ุฃุทูุน ูู Skeleton backend ุงูุขูุ ููุง ูุจุฏุฃ ุจู Permission Managerุ (ูุนุฏ: ูุง ูู ุฒุฑ โุฃูุง ุงููุณุคููโ ุจุฏูู ููููู ูููุชุงุญ ๐).

ุชูุงู ูุง ุนูุงุฑ โ ุจุฏู ูุง ูุณุฃู โุฃุญุทูู ููุงุโุ ุฎููููู ุฃูุฏูู ูู ููู SQL ูุฏูุฌ ูุงุญุฏ ุฌุงูุฒ ูููุณุฎ ูุงูุชุดุบูู ุงูุขู: ูุดูู ูู ุงูุฌุฏุงูู ุงูุฃุณุงุณูุฉ ูุงููุชูุฏูุฉ (RBAC + ABACุ ุฃุฌูุฒุฉ/ุฌูุณุงุชุ WebAuthnุ ุชุนุฏุฏ ุงููุณุชุฃุฌุฑูู Tenantsุ ุณุฌูุงุช ุชุฏููู)ุ ููุงุฑุณุ ุฏูุงู ุงูุชุญุฏูุซ ุงูุขููุ ูุน seed ูุฏูุฑ ุงููsuper-admin ูุฃุฏูุงุฑ/ุตูุงุญูุงุช ููุงุณูุฉ. (ุงุณุชุฎุฏูู ููุง ูู ูุจูุฆุฉ ุงูุชุทููุฑุ ูุจุฏูู ุงูููู ุงูุญุณุงุณุฉ ูุจู ุงูุฅูุชุงุฌ ๐).

> PostgreSQL 14+ โ ูุณุชุฎุฏู pgcrypto ูู gen_random_uuid().



-- =========================================================
-- Identity & Permissions SQL (All-in-One)  โ v1.0
-- Author: You ๐ซถ  | Environment: PostgreSQL 14+
-- =========================================================

-- 0) Extensions
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 1) Helper: updated_at trigger
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 2) Tenancy (optional but recommended)
CREATE TABLE IF NOT EXISTS tenants (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  plan TEXT DEFAULT 'free',
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE TRIGGER trg_tenants_updated_at
BEFORE UPDATE ON tenants FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 3) Users
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID REFERENCES tenants(id) ON DELETE SET NULL,
  email TEXT NOT NULL UNIQUE,
  password TEXT,                         -- bcrypt hash (NULL ุฅุฐุง Passwordless ููุท)
  name TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  is_super_admin BOOLEAN NOT NULL DEFAULT FALSE,
  email_confirmed_at TIMESTAMP,
  totp_secret TEXT,                      -- ุฎุฒููู ููุดููุฑูุง ูู ุงูุฅูุชุงุฌ
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_users_tenant ON users(tenant_id);
CREATE TRIGGER trg_users_updated_at
BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 4) Roles & Permissions (RBAC)
CREATE TABLE IF NOT EXISTS roles (
  id SERIAL PRIMARY KEY,
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  built_in BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (tenant_id, name)
);
CREATE TRIGGER trg_roles_updated_at
BEFORE UPDATE ON roles FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS permissions (
  id SERIAL PRIMARY KEY,
  key TEXT NOT NULL UNIQUE,              -- ูุซุงู: users.read / users.* / settings.update
  description TEXT
);

CREATE TABLE IF NOT EXISTS role_permissions (
  role_id INT REFERENCES roles(id) ON DELETE CASCADE,
  permission_id INT REFERENCES permissions(id) ON DELETE CASCADE,
  PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS user_roles (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  role_id INT REFERENCES roles(id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, role_id)
);

-- Overrides ุนูู ูุณุชูู ุงููุณุชุฎุฏู (ABAC/RBAC hybrid)
CREATE TABLE IF NOT EXISTS user_permissions (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  permission_id INT REFERENCES permissions(id) ON DELETE CASCADE,
  allowed BOOLEAN NOT NULL DEFAULT TRUE,
  PRIMARY KEY (user_id, permission_id)
);

-- 5) Access Policies (ABAC / policy-as-json)
CREATE TABLE IF NOT EXISTS access_policies (
  id SERIAL PRIMARY KEY,
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  policy_json JSONB NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (tenant_id, name)
);
CREATE TRIGGER trg_access_policies_updated_at
BEFORE UPDATE ON access_policies FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 6) Devices & Sessions
CREATE TABLE IF NOT EXISTS devices (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  device_name TEXT,
  device_type TEXT,            -- mobile/desktop/tablet/other
  browser TEXT,
  ip INET,
  last_seen TIMESTAMP NOT NULL DEFAULT NOW(),
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_devices_user ON devices(user_id);

-- Refresh tokens + Sessions (jti ูููJWT)
CREATE TABLE IF NOT EXISTS sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  device_id UUID REFERENCES devices(id) ON DELETE SET NULL,
  user_agent TEXT,
  ip INET,
  jti TEXT UNIQUE,                         -- JWT ID (access) ุฅู ููุช ุชุญูุธู
  refresh_token TEXT UNIQUE,               -- ุฎุฒููู ููุดููุฑูุง/ููุฌุฒูุฃู ูู ุงูุฅูุชุงุฌ
  refresh_expires_at TIMESTAMP NOT NULL,
  revoked BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_sessions_user ON sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_sessions_refresh_exp ON sessions(refresh_expires_at);
CREATE TRIGGER trg_sessions_updated_at
BEFORE UPDATE ON sessions FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- 7) WebAuthn Credentials
CREATE TABLE IF NOT EXISTS webauthn_credentials (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  cred_id TEXT NOT NULL UNIQUE,            -- Base64URL
  public_key TEXT NOT NULL,
  sign_count BIGINT DEFAULT 0,
  transports TEXT[],                        -- ["usb","ble","nfc","internal"]
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_webauthn_user ON webauthn_credentials(user_id);

-- 8) OAuth Clients (ููOIDC/SSO ุฏุงุฎูู)
CREATE TABLE IF NOT EXISTS oauth_clients (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  client_id TEXT NOT NULL UNIQUE,
  client_secret TEXT NOT NULL,             -- ุงุนุฑุถู ูุฑุฉ ูุงุญุฏุฉ ููุท
  redirect_uris TEXT[] NOT NULL,
  scopes TEXT[] DEFAULT ARRAY[]::TEXT[],
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- 9) Audit Logs
CREATE TABLE IF NOT EXISTS audit_logs (
  id BIGSERIAL PRIMARY KEY,
  tenant_id UUID,
  user_id UUID,
  action TEXT NOT NULL,                    -- ex: "auth.login", "admin.grant_permission"
  meta JSONB,
  ip INET,
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_audit_tenant ON audit_logs(tenant_id);
CREATE INDEX IF NOT EXISTS idx_audit_user ON audit_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_audit_action ON audit_logs(action);

-- 10) Core Permissions seed (ูุงุจูุฉ ููุชูุณูุน)
INSERT INTO permissions(key, description) VALUES
  ('users.read','Read users'),
  ('users.create','Create users'),
  ('users.update','Update users'),
  ('users.delete','Delete users'),
  ('users.reset_password','Reset user password'),
  ('roles.read','Read roles'),
  ('roles.create','Create roles'),
  ('roles.update','Update roles'),
  ('roles.delete','Delete roles'),
  ('permissions.read','Read permissions'),
  ('permissions.assign','Assign permissions'),
  ('sessions.read','Read sessions'),
  ('sessions.revoke','Revoke sessions'),
  ('devices.read','Read devices'),
  ('devices.revoke','Revoke devices'),
  ('policies.read','Read ABAC policies'),
  ('policies.update','Update ABAC policies'),
  ('audit.read','Read audit logs'),
  ('impersonate.users','Impersonate users'),
  ('tenants.read','Read tenants'),
  ('tenants.update','Update tenants'),
  ('oauth.clients.manage','Manage OAuth clients'),
  ('signals.create','Create trading signals'),
  ('settings.*','All settings'),
  ('users.*','All users'),
  ('roles.*','All roles'),
  ('permissions.*','All permissions')
ON CONFLICT (key) DO NOTHING;

-- 11) Seed: default tenant + roles
DO $$
DECLARE
  t_id UUID;
  r_super INT;
  r_admin INT;
  r_support INT;
  r_readonly INT;
BEGIN
  -- Tenant
  INSERT INTO tenants(name, plan) VALUES ('Default Tenant','pro')
  ON CONFLICT DO NOTHING;

  SELECT id INTO t_id FROM tenants WHERE name='Default Tenant' LIMIT 1;

  -- Roles (built_in = true)
  INSERT INTO roles(tenant_id, name, description, built_in)
  VALUES
    (t_id, 'super-admin','All permissions', TRUE),
    (t_id, 'admin','Manage users, roles, settings (limited)', TRUE),
    (t_id, 'support','Support staff', TRUE),
    (t_id, 'readonly','Read-only access', TRUE)
  ON CONFLICT DO NOTHING;

  SELECT id INTO r_super FROM roles WHERE tenant_id=t_id AND name='super-admin';
  SELECT id INTO r_admin FROM roles WHERE tenant_id=t_id AND name='admin';
  SELECT id INTO r_support FROM roles WHERE tenant_id=t_id AND name='support';
  SELECT id INTO r_readonly FROM roles WHERE tenant_id=t_id AND name='readonly';

  -- Map permissions to roles
  -- super-admin: ูู ุดูุก
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_super, p.id FROM permissions p
  ON CONFLICT DO NOTHING;

  -- admin: ูุนุธู ุงูุฅุฏุงุฑูุงุช ุจุฏูู impersonation ุงููุงูู
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_admin, p.id FROM permissions p
  WHERE p.key IN (
    'users.read','users.create','users.update','users.reset_password',
    'roles.read','roles.create','roles.update',
    'permissions.read','permissions.assign',
    'sessions.read','sessions.revoke',
    'devices.read','devices.revoke',
    'policies.read','policies.update',
    'audit.read',
    'tenants.read','tenants.update',
    'oauth.clients.manage',
    'signals.create'
  )
  ON CONFLICT DO NOTHING;

  -- support
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_support, p.id FROM permissions p
  WHERE p.key IN ('users.read','users.reset_password','sessions.read','devices.read','audit.read')
  ON CONFLICT DO NOTHING;

  -- readonly
  INSERT INTO role_permissions(role_id, permission_id)
  SELECT r_readonly, p.id FROM permissions p
  WHERE p.key IN ('users.read','roles.read','permissions.read','audit.read')
  ON CONFLICT DO NOTHING;

END $$;

-- 12) Seed: super admin user (DEV ONLY โ ุจุฏูู ุงูุจุฑูุฏ ููููุฉ ุงููุฑูุฑ ููุฑูุง)
-- ููุงุญุธุฉ: ุถุน ููุง hash ููููุฉ ุงููุฑูุฑ (bcrypt) ุฃู ุงุชุฑููุง NULL ุฅู ููุช ุณุชุจุฏุฃ ุจู Passwordless.
-- ูุซุงู hash (ุชููููู/ุงุฎุชุจุงุฑู): "$2b$12$KIXQG8e3pR2sJj2x4xQ2UOUjH9vKf0e5mQmQe2n3Tt8i2x9Y5Ww9a"
-- ุงููููุฉ ุงููุทุงุจูุฉ ุบุงูุจูุง "ChangeMe!123" ูุน cost=12 (ุงุณุชุจุฏููุง ุจูููุชู).
DO $$
DECLARE
  t_id UUID;
  u_id UUID;
  r_super INT;
BEGIN
  SELECT id INTO t_id FROM tenants WHERE name='Default Tenant' LIMIT 1;
  SELECT id INTO r_super FROM roles WHERE tenant_id=t_id AND name='super-admin';

  INSERT INTO users(tenant_id, email, password, name, is_active, is_super_admin, email_confirmed_at)
  VALUES (t_id, 'admin@example.com',
          '$2b$12$KIXQG8e3pR2sJj2x4xQ2UOUjH9vKf0e5mQmQe2n3Tt8i2x9Y5Ww9a',
          'Super Admin', TRUE, TRUE, NOW())
  ON CONFLICT (email) DO NOTHING;

  SELECT id INTO u_id FROM users WHERE email='admin@example.com' LIMIT 1;

  IF u_id IS NOT NULL THEN
    INSERT INTO user_roles(user_id, role_id) VALUES (u_id, r_super)
    ON CONFLICT DO NOTHING;
  END IF;
END $$;

-- 13) ูุซุงู Policy JSON (ABAC) โ ุงุณู ููุงุนุฏุฉ ุฃูููุฉ
INSERT INTO access_policies(tenant_id, name, description, policy_json, is_active)
SELECT t.id, 'signals.create.only_if_subscription_active_and_role',
       'Allow creating signals only if user has role trader and active subscription',
       '{
          "rules":[
            {"effect":"allow",
             "condition":{"and":[
               {"user.subscription.active": true},
               {"user.roles":{"contains":"trader"}}
             ]}}
          ]
        }'::jsonb,
       TRUE
FROM tenants t
WHERE NOT EXISTS (
  SELECT 1 FROM access_policies ap WHERE ap.tenant_id=t.id AND ap.name='signals.create.only_if_subscription_active_and_role'
);

-- 14) Hints/Indexes ุฅุถุงููุฉ ููุฃุฏุงุก
CREATE INDEX IF NOT EXISTS idx_user_permissions_user ON user_permissions(user_id);
CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions(role_id);

-- 15) ุฃุฐูู ุฃุณูู ูููุฑุงุกุฉ (VIEWs ุงุฎุชูุงุฑูุฉ)
CREATE OR REPLACE VIEW v_user_effective_permissions AS
SELECT
  u.id AS user_id,
  p.key AS permission_key,
  COALESCE(up.allowed, TRUE) AS allowed,   -- override ูุนูู ุนูู ุฏูุฑโฆ ุชุนุฏูู ุงูููุทู ุนูุฏ ุงูุญุงุฌุฉ
  u.tenant_id
FROM users u
JOIN user_roles ur ON ur.user_id = u.id
JOIN roles r ON r.id = ur.role_id
JOIN role_permissions rp ON rp.role_id = r.id
JOIN permissions p ON p.id = rp.permission_id
LEFT JOIN user_permissions up ON up.user_id = u.id AND up.permission_id = p.id;

-- =========================================================
-- ุชู. ูุง ุชูุณ: ุบููุฑ ุจุฑูุฏ ุงููsuper-admin ููููุฉ ูุฑูุฑูุ ูุดุบูู 2FA/WebAuthn ูุจู ุงูุฅุทูุงู.
-- =========================================================

ููุงุญุธุงุช ุชุดุบูู ุณุฑูุนุฉ

ุจุนุฏ ุงูุชูููุฐ:

1. ุจุฏูู ุจุฑูุฏ ูุญูู password ูููsuper-admin (hash ุญูููู ุจูููุฉ โฅ 12).


2. ูุนูู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู (TLSุ ููุงุชูุญ JWTุ ุชุดููุฑ ุฃุณุฑุงุฑ TOTP/WebAuthn).


3. ุฅู ููุช ุชุณุชุฎุฏู Passwordless ูุจุฏุงูุฉุ ุงุฌุนู password = NULL ููุนูู magic-link.




ูุงุฐุง ุจุนุฏุ

ูู ุญุงุจุจ ุฃููู ูู:

Migrations Prisma ูุทุงุจูุฉ ููุฐุง ุงููSQL (+ seed script).

Endpoints ุฌุงูุฒุฉ (Express + JWT + TOTP/WebAuthn) ูุน Middlewares requirePermission ูevaluatePolicy.

React Permission Manager ุจูุงุฌูุฉ ุงุญุชุฑุงููุฉ RTL.


ูููู: ุชุญุจ ุฃุทูุน ูู Skeleton backend ุงูุขูุ ููุง ูุจุฏุฃ ุจู  Managerุ (ูุนุฏ: ูุง ูู ุฒุฑ โุฃูุง ุงููุณุคููโ ุจุฏูู ููููู ูููุชุงุญ ๐).