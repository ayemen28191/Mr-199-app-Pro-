تمام — بما أنّك تفضّل البقاء داخل Replit وتريد ملف APK يعمل محليًا (ولا يعتمد على تشغيل موقع ويب)، فأسهل مسار عملي هو تحويل مشروعك إلى تطبيق React Native باستخدام Expo داخل Replit ثم بناء APK عبر EAS Build (الخدمة السحابية الرسمية من Expo). هذا لا يحتاج خادم ويب، والتطبيق سيعمل ذاتيًا على أندرويد، مع إمكانية الاتصال بـ Supabase فقط عند توفّر الإنترنت.

أعطيك الخطوات الدقيقة من الصفر حتى التحزيم، مع أمثلة كود:


---

1) أنشئ مشروع Expo على Replit (TypeScript جاهز)

1. على Replit ابحث عن قالب Expo واضغط “Fork/Use Template”. القالب مُجهّز للعمل مع Expo مباشرة في المتصفح. 


2. داخل الـ Shell في Replit (Terminal):



# تأكد من وجود EAS و Expo CLI في المشروع
npm i -D eas-cli
npm i expo @expo/webpack-config

> Replit + Expo مدعومان رسميًا، والدليل يشرح الإعداد والتشغيل والنشر إلى جهازك. 




---

2) إن كنت تملك منطق TypeScript جاهزًا

لو تطبيقك React/TS على الويب: انقل المكوّنات والمنطق بسهولة إلى React Native (Expo) مع تعديلات واجهة بسيطة:

div → View، و span/p → Text، و img → Image، وأحداث onClick → onPress…

الأنماط: بدّل CSS إلى StyleSheet.create({ ... }).


لو ليس React: أنصح بالتحويل إلى RN بدل WebView، لأنه يديك تطبيقًا محليًا أنظف وأسهل صيانة (وما يحتاج استضافة).


> اختيار Expo يوفر مسارًا مباشرًا لبناء APK/AAB من السحابة عبر EAS Build. 




---

3) إضافة Supabase في Expo (مع حفظ الجلسة محليًا)

ثبّت الحزم:

npm i @supabase/supabase-js
npm i @react-native-async-storage/async-storage
npm i react-native-url-polyfill

أنشئ ملف lib/supabaseClient.ts:

// lib/supabaseClient.ts
import 'react-native-url-polyfill/auto';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = process.env.EXPO_PUBLIC_SUPABASE_URL!;
const SUPABASE_ANON = process.env.EXPO_PUBLIC_SUPABASE_ANON!;

// تفعيل حفظ الجلسة محليًا ليعمل التطبيق ويستعيد تسجيل الدخول حتى بدون شبكة
export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

مثال استخدام سريع داخل App.tsx:

import { useEffect, useState } from 'react';
import { SafeAreaView, Text, Button, FlatList } from 'react-native';
import { supabase } from './lib/supabaseClient';

export default function App() {
  const [rows, setRows] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  async function load() {
    setLoading(true);
    const { data, error } = await supabase.from('items').select('*').limit(20);
    if (!error) setRows(data ?? []);
    setLoading(false);
  }

  useEffect(() => { load(); }, []);

  return (
    <SafeAreaView style={{ padding: 16 }}>
      <Button title={loading ? 'جارِ التحميل...' : 'تحديث'} onPress={load} />
      <FlatList
        style={{ marginTop: 12 }}
        data={rows}
        keyExtractor={(x) => String(x.id)}
        renderItem={({ item }) => <Text>- {item.name}</Text>}
      />
    </SafeAreaView>
  );
}

> هذا الإعداد (AsyncStorage + detectSessionInUrl:false) هو المسار المنصوح به من Expo لاستخدام Supabase على React Native. 



> إن رغبت لاحقًا بدعم Offline-first (العمل دون اتصال ثم المزامنة)، اطلع على دمج WatermelonDB مع Expo وSupabase. 




---

4) ضع مفاتيح Supabase بأمان (Secrets)

في Replit، افتح Secrets وأضف:

EXPO_PUBLIC_SUPABASE_URL

EXPO_PUBLIC_SUPABASE_ANON


Expo سيقرأها وقت البناء والتشغيل. (المفاتيح العامة يمكن تواجدها بتسمية EXPO_PUBLIC_... كي تتوفر في العميل). 


---

5) جرّب على هاتفك أثناء التطوير (اختياري)

يمكنك تشغيل:

npx expo start --tunnel

ثم افتح Expo Go على هاتفك وامسح الـ QR للاختبار السريع. هذه الخطوة اختيارية، الهدف فقط التأكد قبل البناء. دليل Replit + Expo يشرح المسار. 


---

6) جهّز إعدادات البناء عبر EAS (لإنشاء APK)

أنشئ ملف eas.json في جذر المشروع:

{
  "cli": { "version": ">= 11.0.0" },
  "build": {
    "preview": {
      "android": { "buildType": "apk" }
    },
    "production": {
      "android": { "buildType": "app-bundle" }
    }
  }
}

> افتراضيًا، EAS تبني AAB؛ لتثبيت مباشر على الجهاز اختر APK كما في buildType: "apk". 



سجّل دخولك إلى Expo (مرة واحدة):

npx eas login

فعّل الإعداد للمشروع:

npx eas build:configure

ابنِ نسخة أندرويد APK:

npx eas build -p android --profile preview

بعد اكتمال البناء سيظهر لك رابط تنزيل الـ APK في السطر الأخير من الإخراج (ومن لوحة Expo EAS أيضًا). 

> ملاحظات:

إن أردت ملف AAB لمتجر Play استخدم --profile production (أو غيّر buildType إلى "app-bundle"). 





---

7) ثبّت الـ APK على جهازك

نزّل الملف على الهاتف وثبّته (اسمح “التثبيت من مصادر غير معروفة” عند الحاجة). دليل Expo يشرح الفروقات بين APK/AAB وكيفية التثبيت المباشر. 


---

أسئلة شائعة/نصائح سريعة

هل أحتاج خادم ويب يعمل؟ لا. تطبيق Expo (React Native) هو تطبيق أصلي يعمل ذاتيًا — ولن يعتمد على استضافة موقعك. فقط اتصاله بالإنترنت سيكون لواجهات Supabase عند تنفيذ الاستعلامات. 

هل يمكنني البقاء بالكامل داخل Replit؟ نعم: التطوير يتم على Replit، والبناء يتم عبر EAS Build السحابي الرسمي من Expo، وهو المسار الموصى به. 

أداء أوفلاين؟ أضف طبقة تخزين محلي ومزامنة لاحقة (WatermelonDB + Supabase) لو أردت تجربة قوية بلا إنترنت. 



---

خلاصة المسار العملي المختصر

1. أنشئ مشروع Expo على Replit. 


2. انقل منطقك TypeScript إلى مكوّنات React Native، وأضف Supabase كما في الكود أعلاه. 


3. أضف مفاتيح Supabase في Secrets. 


4. ابنِ APK عبر eas build -p android --profile preview بعد إعداد eas.json. 


5. نزّل الـ APK وثبّته على أندرويد — يعمل محليًا بلا خادم ويب. 



إذا حبيت، أكتب لك الآن هيكل مشروع جاهز (ملفات ومجلدات) لتنسخه داخل Replit مع شاشة مثال CRUD على Supabase.

