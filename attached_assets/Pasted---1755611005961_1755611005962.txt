ممتاز يا عمار — خارطة الطريق جاهزة ومرتّبة. أدناه خطوة-بخطوة ما عليك فعله الآن وما تفعله غدًا والأسبوع القادم، مع أوامر جاهزة للصق، رسائل commit وPR، وقائمة مراجعة دقيقة تضمن أن كل تغيير آمن ويمكن التراجع عنه. خفيفة على المزاح: فكر بي كـ «مهندس تدقيق افتراضي» — أعمل بالسطر الواحد وأترك لك القرار النهائي 😄.


---

الخطة العملية الآن — تنفيذ فوري (الساعة القادمة)

1. افتح التيرمينال في جذر المستودع وأنشئ فرع عمل جديد:



git checkout -b chore/audit-cleanup-$(date +%F)

2. شغّل فحص سريع شامل (يبني ويجمع مشكلات فورية):



# شغّل السكربت التدقيقي الذي أنتجهنا
bash repo-audit.sh

# فحص TypeScript و ESLint سريعاً
npx tsc --noEmit
npx eslint . --ext .js,.ts,.tsx --max-warnings=0 || true

راجع الملفات الناتجة في audit-results/ (خصوصًا tsc-errors.txt, madge-orphans.txt, depcheck.json).

3. أرشفة أي أصول غير مستخدمة مباشرة (آمن ومقلل مخاطر):



mkdir -p archive/unused-assets
# مثال: عدّل اسم الملف حسب الموجود في audit-results/assets-unused.txt
git mv path/to/that-unused-image.png archive/unused-assets/ || mv path/to/that-unused-image.png archive/unused-assets/
git add archive/unused-assets
git commit -m "chore: archive unused assets discovered by audit"

4. إزالة الحزم الآمنة الآن (حسب ملخصك: memorystore, next-themes, openid-client):



npm uninstall memorystore next-themes openid-client
npm install
npx tsc --noEmit

إذا فشل npx tsc --noEmit — احتفظ بأي رسائل خطأ، عدّل، ثم أعد المحاولة. لا تدع الحذف يذهب إلى main بدون اختبار.

5. ادفع فرع العمل وافتح PR (اختياري عبر gh CLI):



git push origin chore/audit-cleanup-$(date +%F)
# لو مثبت gh:
gh pr create --title "chore: cleanup - remove unused deps & archive assets" \
--body "See audit-results/* for details. Removes memorystore, next-themes, openid-client and archives unused assets. Run tsc & tests locally before merging." \
--base main

إن لم يكن gh مثبتًا، افتح PR عبر GitHub UI.


---

ماذا تفعل بعد الإجراء الفوري — يوم 1 / يوم 2

A — مراجعة الحزم المشكوك بها (يدوي)

نفّذ بحثًا دقيقًا لكل حزمة في القائمة المشكوك بها:

# مثال
rg -n "from ['\"]passport|require\(['\"]passport" || true
rg -n "from ['\"]framer-motion|require\(['\"]framer-motion" || true
rg -n "from ['\"]xlsx|require\(['\"]xlsx" || true

إذا لم تُعثر على استدعاءات مباشرة، فاحسب احتمالية الاستعمال الديناميكي (require(pkgName) أو استخدامها في سيرفر منفصل). اجمع النتائج في audit-results/deps-usage.txt.

B — إصلاح أخطاء TypeScript (أولويات)

شغّل:


npx ts-prune || true      # يعرض exports غير مستخدمة
npx -y ts-node --version  # للتأكد البيئة

معالجة الأنواع الشائعة:

إذا الخطأ متعلق بـ props ضع واجهة (interface) واضحة أو استخدم Partial<> أو unknown مؤقتًا.

إذا المشكلة Drizzle/SQL: تأكد أن استيراد sql موجود وراجع أنواع الاستعلام drizzle-orm types.

أمثلة سريعة:



// مثال: إصلاح Prop error
type ProjectSelectorProps = {
  selectedId?: string;
  onSelect: (id: string) => void;
};
function ProjectSelector({ selectedId, onSelect }: ProjectSelectorProps) { /*...*/ }

استخدم // TODO: fix types — TEMP @ts-ignore فقط مؤقتًا عند الحاجة.


C — اختبارات وتجربة محلية

npm run build
npm start    # أو كيفية تشغيل المشروع محليًا
# افتح صفحات أساسية وتأكد أن الواجهة تعمل


---

الأسبوع القادم — (أيام 3-7)

1. حذف آمن للحزم المتأكدة: بعد مراجعة يدوية، أزل الحزم المشكوك بها إذا ثبت أنها غير مستخدمة.


2. حل الأخطاء الـ 24: خصص 1–2 يوم لمعالجة الأخطاء المتبقية، كل ملف بخطأ واحد — اخلق commit لكل مجموعة من الإصلاحات المفهومة.


3. اختبارات وظيفية (smoke tests) على staging: شغّل السيولة الأساسية، التقارير، تصدير Excel، والاتصال بـ Supabase.


4. تفعيل CI: إذا لم تُفعَّل بعد، ادفع .github/workflows/ci.yml وتأكد أن GitHub Actions يمرّ على PR:

تفقد صفحة Actions > آخر run، اقرأ الـ logs.





---

نماذج رسائل Commit / PR / وصف التغيير (انسخها)

commit message (حذف deps + أرشفة assets):

chore: remove unused deps (memorystore, next-themes, openid-client) + archive unused assets

- Removed: memorystore, next-themes, openid-client
- Archived: archive/unused-assets/<files>
- Notes: ran npx tsc --noEmit and build locally; minor TS fixes applied

PR description template:

## Summary
- Remove unused dependencies: memorystore, next-themes, openid-client
- Archive unused assets (see archive/unused-assets)
- Run audit scripts in audit-results/

## How to test
1. npm install
2. npx tsc --noEmit
3. npm run build
4. Start app and test main flows (reports, login, export)

## Files changed
- package.json
- package-lock.json / pnpm-lock.yaml
- archive/unused-assets/

## Notes
- If CI fails on TS checks, see audit-results/tsc-errors.txt for details.
- Recommend staging test 24–48h before merging to main.

PR Review checklist (للمراجعين):

[ ] tsc --noEmit يمر بنجاح

[ ] لا تحذيرات ESLint حرجة

[ ] بناء ناجح

[ ] smoke test في staging ناجح

[ ] الملفات المؤرشفة موصوفة في PR



---

إعدادات مفيدة (اختياري، لكن أنصح بها)

1) pre-commit hook (Husky + lint-staged)

npm install -D husky lint-staged
npx husky install
npx husky add .husky/pre-commit "npx lint-staged"
# then add to package.json:
# "lint-staged": { "*.{js,ts,tsx}": ["eslint --fix", "git add"] }

2) جدولة audit آلي شهري (Already in ci.yml) — تأكد أن الـ workflow يقوم بتحميل artifact audit-results.


---

ما الذي سأفعله لك لو طلبت الآن؟

أقدر أن أجهز لك فورًا (اختر واحدًا):

1. ملف patch (git diff) جاهز لتطبيقه على المستودع يحوي: إزالة الحزم، commit message، وأرشفة الأصول.


2. نص PR كامل مع وصف ومراجع ومخرجات audit-results/* مُلصقة (جاهز للصق في GitHub).


3. قائمة مفصّلة لحل كل خطأ TypeScript (سطر سطر) — أكتبها وأعطيك تغييرات مقترحة في كل ملف.



قل لي أي رقم تختار (1، 2، أو 3) وأنا أجهّزها لك فورًا هنا جاهزة للصق — ولا أقلّك تنتظر (أعملها الآن ضمن هذه الرسالة).

