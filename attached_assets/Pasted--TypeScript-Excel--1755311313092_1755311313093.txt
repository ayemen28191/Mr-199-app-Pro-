جميل — أرفقت لك دالة TypeScript كاملة ومُعدّة لإنتاج ملف Excel بمحاولة مطابقة أقرب ما يكون إلى الصورة (تنسيق RTL، عناوين مدموجة، رؤوس ملونة، صف إجماليات أخضر، صناديق توقيع، محاذاة وأعمدة مُطابقة). سأكون صريحًا: لا يمكنني **ضمان مطابقة 100% بكسل-ببكسل** لأن عرض الخطوط والأبعاد يعتمد على برنامج فتح الملف (Excel / LibreOffice) والخطوط المتوفرة على النظام. لكن الشيفرة أدناه تصمم الملف بشكل احترافي ودقيق ويمكن تعديلها بسهولة للحصول على تطابق أقرب (إضافة شعار بصورة، تغيير الخطوط، ألوان دقيقة، خلفيات، أو استيراد قالب Excel مسبق).
 
**تعليمات سريعة قبل الشيفرة**
 
 
1. تأكد أن مشروعك يستخدم `esModuleInterop: true` في tsconfig عند استيراد `exceljs`.
 
2. تنصيب الحزم:
 

 `npm install exceljs # أو مع TypeScript types (عادة غير ضرورية لأن exceljs يتضمن أنماط): npm install --save-dev @types/node ` 
 
1. احفظ الملف كـ `exportWorkerReport.ts` ثم شغّله عبر `ts-node` أو ترجمه إلى JS.
 

  
# دالة TypeScript (exportWorkerReport.ts)
 `/**  * exportWorkerReport.ts  * دالة TypeScript لإنشاء ملف Excel بتنسيق عربي RTL مطابق تقريبًا للصورة المرفقة.  *  * متطلبات: exceljs  * تثبيت: npm install exceljs  *  * مثال تشغيل مرفق أسفل الملف.  */  import ExcelJS from "exceljs"; import * as fs from "fs"; import * as path from "path";  type RowItem = {   no: number;   date: string;   day: string;   project: string;   daily_wage: number | string;   work_days: number | string;   total_hours: number | string;   amount_due: number;   amount_paid: number;   remaining: number;   notes?: string; };  type Totals = {   sum_amount_due: number;   sum_amount_paid: number;   sum_remaining: number;   grand_total_hours: number;   grand_total_days: number | string; };  export async function exportWorkerReport(   filePath: string,   opts: {     companyName: string;     reportTitle: string;     periodFrom: string;     periodTo: string;     workerName: string;     workerJob: string;     totalDays: string | number;     tableRows: RowItem[];     totals: Totals;   } ) {   const {     companyName,     reportTitle,     periodFrom,     periodTo,     workerName,     workerJob,     totalDays,     tableRows,     totals,   } = opts;    const wb = new ExcelJS.Workbook();   wb.creator = "ExportScript";   wb.created = new Date();   const ws = wb.addWorksheet("كشف حساب", {     properties: { defaultRowHeight: 20 },     pageSetup: { fitToPage: true, fitToWidth: 1, fitToHeight: 0 },   });    // حاول ضبط العرض RTL (بعض القارئات قد تتجاهل)   ws.views = [{ rightToLeft: true }];    // أعمدة (نضبط 11 عمود كما في الصورة)   ws.columns = [     { header: "م", key: "no", width: 4 },     { header: "التاريخ", key: "date", width: 14 },     { header: "اليوم", key: "day", width: 12 },     { header: "اسم المشروع", key: "project", width: 32 },     { header: "الأجر اليومي", key: "daily_wage", width: 14 },     { header: "أيام العمل", key: "work_days", width: 10 },     { header: "إجمالي الساعات", key: "total_hours", width: 14 },     { header: "المبلغ المستحق", key: "amount_due", width: 15 },     { header: "المبلغ المستلم", key: "amount_paid", width: 15 },     { header: "المتبقي", key: "remaining", width: 13 },     { header: "ملاحظات", key: "notes", width: 22 },   ];    // أنماط مشتركة   const headerFill = { type: "pattern", pattern: "solid", fgColor: { argb: "FF1F75BC" } }; // أزرق غامق   const greenFill = { type: "pattern", pattern: "solid", fgColor: { argb: "FFC6EFCE" } }; // أخضر فاتح   const thinBorder = {     top: { style: "thin" as const, color: { argb: "FF000000" } },     left: { style: "thin" as const, color: { argb: "FF000000" } },     bottom: { style: "thin" as const, color: { argb: "FF000000" } },     right: { style: "thin" as const, color: { argb: "FF000000" } },   };    // === ترويسة الصفحة (merged) ===   ws.mergeCells("A1:K1");   const titleCell = ws.getCell("A1");   titleCell.value = companyName;   titleCell.alignment = { vertical: "middle", horizontal: "center" };   titleCell.font = { name: "Calibri", size: 16, bold: true };    ws.mergeCells("A2:K2");   const subtitle = ws.getCell("A2");   subtitle.value = reportTitle;   subtitle.alignment = { vertical: "middle", horizontal: "center" };   subtitle.font = { name: "Calibri", size: 12, bold: true };    ws.mergeCells("A3:K3");   ws.getCell("A3").value = `للفترة: من ${periodFrom} إلى ${periodTo}`;   ws.getCell("A3").alignment = { vertical: "middle", horizontal: "center" };   ws.getCell("A3").font = { name: "Calibri", size: 11 };    // معلومات العامل في الصف الرابع   ws.mergeCells("A4:D4");   ws.getCell("A4").value = `اسم العامل: ${workerName}`;   ws.getCell("A4").alignment = { horizontal: "left", vertical: "middle" };   ws.getCell("A4").font = { name: "Calibri", size: 11 };    ws.mergeCells("E4:H4");   ws.getCell("E4").value = `المهنة: ${workerJob}`;   ws.getCell("E4").alignment = { horizontal: "left", vertical: "middle" };   ws.getCell("E4").font = { name: "Calibri", size: 11, bold: true };    ws.mergeCells("I4:K4");   ws.getCell("I4").value = `إجمالي أيام العمل: ${totalDays}`;   ws.getCell("I4").alignment = { horizontal: "right", vertical: "middle" };   ws.getCell("I4").font = { name: "Calibri", size: 11, bold: true };    // ترك سطر للفراغ   const headerRowIndex = 6;   // رؤوس الجدول   const headerRow = ws.getRow(headerRowIndex);   const headers = ["م", "التاريخ", "اليوم", "اسم المشروع", "الأجر اليومي", "أيام العمل", "إجمالي الساعات", "المبلغ المستحق", "المبلغ المستلم", "المتبقي", "ملاحظات"];   headers.forEach((h, i) => {     const cell = headerRow.getCell(i + 1);     cell.value = h;     cell.fill = headerFill;     cell.font = { color: { argb: "FFFFFFFF" }, bold: true, name: "Calibri", size: 11 };     cell.alignment = { vertical: "middle", horizontal: "center", wrapText: true };     cell.border = thinBorder;   });   headerRow.height = 28;    // بيانات الجدول   let currentRow = headerRowIndex + 1;   for (const row of tableRows) {     const r = ws.getRow(currentRow);     r.getCell(1).value = row.no;     r.getCell(2).value = row.date;     r.getCell(3).value = row.day;     r.getCell(4).value = row.project;     r.getCell(5).value = typeof row.daily_wage === "number" ? row.daily_wage : row.daily_wage;     r.getCell(6).value = typeof row.work_days === "number" ? row.work_days : row.work_days;     r.getCell(7).value = typeof row.total_hours === "number" ? row.total_hours : row.total_hours;     r.getCell(8).value = row.amount_due;     r.getCell(9).value = row.amount_paid;     r.getCell(10).value = row.remaining;     r.getCell(11).value = row.notes || "";      // محاذاة وأنماط     for (let c = 1; c <= 11; c++) {       const cell = r.getCell(c);       cell.border = thinBorder;       if ([5, 6, 7, 8, 9, 10].includes(c)) {         cell.alignment = { horizontal: "right", vertical: "middle" };         if (typeof cell.value === "number") {           cell.numFmt = "#,##0";         }       } else if (c <= 3) {         cell.alignment = { horizontal: "center", vertical: "middle" };       } else {         cell.alignment = { horizontal: "left", vertical: "middle" };       }     }      // تلوين المتبقي حسب القيمة     const remCell = r.getCell(10);     if (typeof row.remaining === "number") {       if (row.remaining > 0) {         remCell.font = { color: { argb: "FF008000" }, bold: true }; // أخضر       } else if (row.remaining < 0) {         remCell.font = { color: { argb: "FFFF0000" }, bold: true }; // أحمر       } else {         remCell.font = { color: { argb: "FF000000" } };       }     }      r.commit();     currentRow++;   }    // صف الإجماليات   const totalsRow = ws.getRow(currentRow);   ws.mergeCells(currentRow, 1, currentRow, 4); // A: D   totalsRow.getCell(1).value = "الإجماليات";   totalsRow.getCell(1).alignment = { horizontal: "center", vertical: "middle" };   totalsRow.getCell(1).font = { bold: true, name: "Calibri" };    totalsRow.getCell(6).value = totals.grand_total_days;   totalsRow.getCell(6).alignment = { horizontal: "right", vertical: "middle" };   totalsRow.getCell(6).font = { bold: true };    totalsRow.getCell(7).value = totals.grand_total_hours;   totalsRow.getCell(7).alignment = { horizontal: "right", vertical: "middle" };   totalsRow.getCell(7).font = { bold: true };    totalsRow.getCell(8).value = totals.sum_amount_due;   totalsRow.getCell(9).value = totals.sum_amount_paid;   totalsRow.getCell(10).value = totals.sum_remaining;    for (let c of [6, 7, 8, 9, 10]) {     totalsRow.getCell(c).alignment = { horizontal: "right", vertical: "middle" };     totalsRow.getCell(c).border = thinBorder;     if (typeof totalsRow.getCell(c).value === "number") totalsRow.getCell(c).numFmt = "#,##0";   }    // تلوين صف الإجماليات باللون الأخضر (كما في الصورة)   for (let c = 1; c <= 11; c++) {     const cell = totalsRow.getCell(c);     cell.fill = greenFill;     cell.border = thinBorder;   }   totalsRow.height = 20;   totalsRow.commit();    // قسم الملخص النهائي أسفل   const summaryRowIndex = currentRow + 2;   ws.mergeCells(summaryRowIndex, 1, summaryRowIndex, 11);   const summaryCell = ws.getCell(`A${summaryRowIndex}`);   summaryCell.value = `الملخص النهائي: إجمالي المبلغ المستحق: ${totals.sum_amount_due}   إجمالي المبلغ المحول: ${totals.sum_amount_paid}   إجمالي المبالغ المتبقية: ${totals.sum_remaining}`;   summaryCell.alignment = { horizontal: "center", vertical: "middle" };   summaryCell.font = { bold: true, name: "Calibri" };    // صناديق التوقيع   const sigRow = summaryRowIndex + 3;   ws.mergeCells(sigRow, 1, sigRow + 1, 3); // توقيع العامل   ws.getCell(sigRow, 1).value = "توقيع العامل\n--------------------";   ws.getCell(sigRow, 1).alignment = { horizontal: "center", vertical: "middle", wrapText: true };    ws.mergeCells(sigRow, 5, sigRow + 1, 7); // توقيع المهندس المشرف   ws.getCell(sigRow, 5).value = "توقيع المهندس المشرف\n--------------------";   ws.getCell(sigRow, 5).alignment = { horizontal: "center", vertical: "middle", wrapText: true };    ws.mergeCells(sigRow, 9, sigRow + 1, 11); // توقيع المحاسب   ws.getCell(sigRow, 9).value = "توقيع المحاسب\n--------------------";   ws.getCell(sigRow, 9).alignment = { horizontal: "center", vertical: "middle", wrapText: true };    // تحسين المظهر: ارتفاعات الصفوف   ws.getRow(1).height = 28;   ws.getRow(2).height = 20;   ws.getRow(3).height = 18;   ws.getRow(4).height = 20;    // حفظ الملف   await wb.xlsx.writeFile(filePath);   return filePath; }   /* -------------------------    مثال استخدام (اختياري)    ------------------------- */  if (require.main === module) {   (async () => {     const out = path.resolve(process.cwd(), "worker_report_ts.xlsx");      const sampleRows: RowItem[] = [       { no: 1, date: "25/07/2025", day: "السبت", project: "مشروع مصنع الحشيش", daily_wage: 8000, work_days: 0.5, total_hours: 4.0, amount_due: 4000, amount_paid: 5000, remaining: -1000 },       { no: 2, date: "26/07/2025", day: "الاحد", project: "مشروع مصنع الحشيش", daily_wage: 8000, work_days: 1, total_hours: 8, amount_due: 8000, amount_paid: 5000, remaining: 3000 },       // ... (انسخ بقية صفوف العينة كما تريد)       { no: 12, date: "04/08/2025", day: "الثلاثاء", project: "مشروع مصنع الحشيش", daily_wage: "-", work_days: "-", total_hours: "-", amount_due: 21000, amount_paid: 0, remaining: 21000, notes: "رقم الحوالة: 3736" },     ];      const totals: Totals = {       sum_amount_due: 76000,       sum_amount_paid: 76000,       sum_remaining: 0,       grand_total_hours: 76,       grand_total_days: 9.5     };      try {       const resultPath = await exportWorkerReport(out, {         companyName: "شركة الفني للمقاولات والاستشارات الهندسية",         reportTitle: "كشف حساب تفصيلي للعمال",         periodFrom: "25/07/2025",         periodTo: "11/08/2025",         workerName: "عبدالله عمر",         workerJob: "مساعد ملحم",         totalDays: "8.5",         tableRows: sampleRows,         totals       });       console.log("تم إنشاء الملف بنجاح:", resultPath);     } catch (err) {       console.error("فشل إنشاء الملف:", err);     }   })(); } `  