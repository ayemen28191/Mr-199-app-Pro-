تمام — اعتبرت ردّك "ج" اختيارًا للخيار (ج) Port يدوي كامل للوصول إلى تطابق 100%. هذه خطة تنفيذ جاهزة بدون انتظار، مع مخرجات واضحة، معايير قبول صارمة، وخطوات عملية من الآن.

الهدف

تحقيق تطابق وظيفي وبصري 100% بين الويب ونسخة APK عبر إعادة تنفيذ (Port) كل المكونات والشاشات كمكوّنات React Native أصلية، مع المحافظة على نفس السلوك والـAPI والنتائج.

المخرجات الإلزامية (Deliverables)

1. Matrix تطابق الشاشات والمكوّنات (web → mobile) مع حالة كل عنصر.


2. Design Tokens موحّدة (ألوان، خطوط، مسافات، ظلال…) + دليل نمط (Style Guide).


3. نظام مكوّنات محلي يعادل shadcn/ui: Button, Input, Select, Card, Dialog, Toast, Tabs, Table, Tooltip, Dropdown, Badge, Modal, Sheet.


4. تطابق الأصول (Assets): صور/أيقونات/خطوط بأسماء ومسارات متطابقة قدر الإمكان.


5. طبقة بيانات موحّدة (Supabase/API) بنفس النماذج والعمليات.


6. اختبارات E2E (Detox/Appium) + اختبارات بصرية (visual diff) مع تقرير HTML يثبت 0 اختلاف.


7. APK جاهز + تقرير مطابقة نهائي (HTML/PDF) يُظهر اجتياز جميع معايير القبول.



معايير القبول (Definition of Done)

وظيفيًا: كل شاشة وتدفق عمل في الويب له نظير يعمل 1:1 في المحمول (نفس المدخلات والمخرجات وحالات الخطأ).

بصريًا: اختلاف لقطات الشاشة (web vs mobile) عبر أداة مقارنة صور = 0 بكسل على مقاسات مستهدفة (مع تعويض فروق النظام مثل شريط الحالة).

API/بيانات: نفس الطلبات والاستجابات (حقول/أنواع/أكواد خطأ).

أداء: زمن تفاعل أولي، تبديل شاشات، وسلاسة تمر ضمن الحدود المتفق عليها.

اختبارات: 100% من اختبارات القبول الحرجة Pass، والسجلات مرفقة في التقرير.


خطة التنفيذ (مختصرة وقابلة للتنفيذ)

المرحلة 1 — التهيئة والتخطيط

استنساخ الويب، استخراج APK (للرجوع البصري)، إعداد مشروع RN (Expo أو Bare).

بناء Matrix: قائمة كل الشاشات والمكوّنات والـassets مع روابط الملفات في الويب.

تعريف Design Tokens انطلاقًا من Tailwind/الشِفرات الحالية (colors, spacing, radii, shadows, typography).


المرحلة 2 — نظام المكوّنات (Design System)

إنشاء مكتبة @mobile/ui تتضمن بدائل shadcn/ui:

أساسيات: Button, Icon, Text, Heading, Input, Select, Checkbox, Radio, Switch

تخطيط/أوعية: Card, Sheet, Modal, Dialog, Tabs

معلومات: Badge, Tooltip, Toast, Spinner

Table/Lists: استخدام FlashList للجداول الكبيرة، مع خلايا قابلة لإعادة الاستخدام.


ربط الـTokens: ملف ثوابت + Hooks (useTheme) + Utilities (rtl/ltr).


المرحلة 3 — Port الشاشات (12 الأساسية ثم الباقي)

ترتيب الأولويات: Dashboard → Projects → Workers…

لكل شاشة:

1. تحليل JSX/TSX في الويب، استخراج المنطق والـAPI.


2. إعادة التنفيذ RN بواجهة مطابقة.


3. مطابقة الحالات والحواف (Edge Cases).


4. توصيل البيانات Supabase بنفس الاستعلامات/Policies.




المرحلة 4 — الأصول والأنماط

مزامنة الخطوط/الأيقونات، تحويل SVG إلى react-native-svg إذا لزم.

خرائط CSS → RN Styles (أو NativeWind إن رغبت) مع تطابق Pixel للمسافات والألوان والظلال.


المرحلة 5 — الاختبارات البصرية والوظيفية

لقطات ويب (Puppeteer) مقابل لقطات محمول (Detox screenshot).

مقارنة بصريّة بـ pixelmatch للحصول على فرق = 0 (بعد قصّ Status Bar/Navigation).

E2E لتدفقات: تسجيل الدخول، CRUD رئيسية، تقارير، رفع/تنزيل.


المرحلة 6 — التقارير والبناء

توليد تقرير مطابقة نهائي:

جدول كل شاشة/مكوّن: الحالة، روابط الكود، لقطة الويب، لقطة المحمول، نتيجة diff (0px).

ملخص المطابقة الكلية = 100%.


بناء APK ومراجعة نهائية على أجهزة حقيقية.


هيكلة المستودع المقترحة

repo/
  apps/
    web/            # للرجوع البصري فقط
    mobile/         # تطبيق RN
  packages/
    ui/             # نظام المكوّنات البديل للشبكات
    tokens/         # design tokens مشتركة
    data/           # عميل Supabase + نماذج/خواص موحدة
    utils/          # توابع مشتركة (formatters, validators)
  tests/
    e2e/            # Detox/Appium
    visual/         # scripts اللقطات والمقارنة

سكربتات جاهزة (نماذج)

1) لقطات ويب (Puppeteer)

node tests/visual/capture-web.js --url https://localhost:5173 --out out/visual/web --screens Dashboard,Projects,...

2) لقطات محمول (Detox)

detox test --configuration android.emu.release --take-screenshots all --artifacts-location out/visual/mobile

3) مقارنة بصرية (pixelmatch)

node tests/visual/compare.js --web out/visual/web --mobile out/visual/mobile --crop-statusbar --threshold 0
# ينتج HTML report ويُفشل أي اختلاف > 0

قواعد التحويل (Mapping) السريعة

Typography: طابق الخط/الحجم/الوزن/الارتفاع سطرًا بسطر؛ استعمل react-native-global-props أو theme provider.

Spacing: استخرج مقاييس Tailwind كـtokens (4/8/12/16… px) واستعملها في RN.

Shadows: خريطة shadow-* إلى elevation على أندرويد + shadow* على iOS (ثوابت موحّدة).

Borders/Radius: طبق نفس radii على الحاويات والبطاقات.

Tables/Charts:

جداول: FlashList + خلايا قابلة لإعادة الاستخدام + sticky headers.

رسوم: victory-native أو react-native-svg-charts مع نفس palette والقيم.



اختبار الوظائف (عينات حالات قبول)

Dashboard: نفس البطاقات/المؤشرات، نفس حساب القيم، تحديث حي إن وُجد.

Projects: تصفية/بحث/فرز مطابقة، نتائج متطابقة حرفيًا.

Reports: توليد نفس النتائج (CSV/PDF) بالقيم ذاتها.

Advanced Reports: نفس المعادلات/الفلاتر، أرقام مطابقة.


ما سأفعله الآن بدون أسئلة إضافية

أجهّز قوالب: @mobile/ui, @mobile/tokens, @mobile/data.

أبدأ بـ Dashboard كنموذج مرجعي للمطابقة البصرية 0px.

أُنشئ سكربتات اللقطات والمقارنة وأول تقرير بصري.

أضبط Supabase client والإعدادات (Auth/Policies) مطابقة للويب.


ما أحتاجه منك لو متاح (اختياري لتسريع التنفيذ)

مسار مشروع الويب ولقائمة الشاشات ذات الأولوية.

الـAPK الحالي (لللقطات المرجعية).

ملفيّ tailwind.config.* وtheme إن وُجدا، وأسماء الخطوط المستخدمة.



---

إذا رغبت برسالة رسمية قصيرة لإبلاغ الطرف الآخر أننا اعتمدنا الخيار (ج) Port يدوي كامل مع تعهّد تطابق 100% ومعايير القبول، أكتب: "أرسل رسالة الموافقة (ج)" وسأضعها لك فورًا جاهزة للإرسال.

