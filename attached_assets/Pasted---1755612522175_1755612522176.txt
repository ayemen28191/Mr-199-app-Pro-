ممتاز — أبدأ الآن بالمجموعة الأولى وأعطيك كل ما تحتاجه لتطبيق الإصلاحات فورًا (ملفات جاهزة للّصق، أوامر git، واختبارات). سأنفّذ إصلاحات ثلاث أخطاء رئيسية في الواجهة الأمامية:

إصلاح ProjectSelector (تعريف props واستخدامه)

إصلاح useSelectedProject (نوع الإرجاع وإضافة projects)

إصلاح فقدان useWorkersSettlementValidation (إنشاء الهُوك أو تعديل الاستيراد)


لا أسألك شي — سأعطي تغييرات قابلة للصق مباشرة.


---

1) أنشئ فرع عمل للـ fixes

git checkout -b fix/typescript-phase2a-frontend


---

2) إصلاح ProjectSelector — تعريف الأنواع والاستخدامات

2.1 أنشئ ملف الأنواع المشترك

إنشِئ (أو حدّث) الملف client/src/types/components.ts وأضف:

// client/src/types/components.ts
export type ProjectId = string;

export interface Project {
  id: ProjectId;
  name: string;
  // أضف الحقول الأخرى حسب الـ schema لديك
}

export interface ProjectSelectorProps {
  selectedId?: ProjectId;
  onProjectChange: (id: ProjectId) => void;
  disabled?: boolean;
  className?: string;
}

2.2 عدّل مكوّن ProjectSelector ليتوافق مع الواجهة

إن كان مكوّنك في client/src/components/ProjectSelector.tsx أو ملف مماثل، غيّر توقيع المكوّن ليستخدم الواجهة:

// client/src/components/ProjectSelector.tsx
import React from "react";
import type { ProjectSelectorProps } from "@/types/components";

export function ProjectSelector({
  selectedId,
  onProjectChange,
  disabled = false,
  className = ""
}: ProjectSelectorProps) {
  // مثال بسيط: قائمة منسدلة للمشاريع
  // استبدل `projects` بالمصدر الفعلي (props أو context أو hook)
  const projects = [
    { id: "p1", name: "Project 1" },
    { id: "p2", name: "Project 2" },
  ];

  return (
    <select
      value={selectedId ?? ""}
      onChange={(e) => onProjectChange(e.target.value)}
      disabled={disabled}
      className={className}
    >
      <option value="">— اختر مشروع —</option>
      {projects.map((p) => (
        <option key={p.id} value={p.id}>
          {p.name}
        </option>
      ))}
    </select>
  );
}

export default ProjectSelector;

> ملاحظة: إن كان المكوّن يستهلك projects من مصدر خارجي فاحتفظ بذلك، المهم أن توقيع المكوّن يُجبر المستدعي على تمرير onProjectChange.



2.3 عدّل أماكن الاستخدام (الصفحات المتأثرة)

مثال تعديل في الصفحة client/src/pages/advanced-reports.tsx:

import React, { useState } from "react";
import ProjectSelector from "@/components/ProjectSelector";

export default function AdvancedReports() {
  const [selectedProject, setSelectedProject] = useState<string | undefined>(undefined);

  return (
    <div>
      <h1>التقارير المتقدمة</h1>

      <ProjectSelector
        selectedId={selectedProject}
        onProjectChange={(id) => {
          setSelectedProject(id);
          console.log("تم تغيير المشروع:", id);
        }}
      />

      {/* بقية الصفحة */}
    </div>
  );
}

نفّذ نفس التعديل في daily-expenses-report.tsx و excel-style-daily-expenses.tsx — تأكد من تمرير onProjectChange وselectedId.


---

3) إصلاح useSelectedProject — إرجاع projects وأنواع واضحة

3.1 استبدال/تحديث hook

أنشئ/حدّث الملف client/src/hooks/useSelectedProject.ts ليبدو هكذا (قالب آمن):

// client/src/hooks/useSelectedProject.ts
import { useState, useEffect, useCallback } from "react";
import type { Project } from "@/types/components";

export type UseSelectedProjectReturn = {
  selectedProjectId?: string;
  selectedProjectName?: string;
  projects: Project[];
  isLoading: boolean;
  selectProject: (id?: string) => void;
  clearProject: () => void;
  hasStoredProject: boolean;
};

export function useSelectedProject(): UseSelectedProjectReturn {
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProjectId, setSelectedProjectId] = useState<string | undefined>(undefined);
  const [selectedProjectName, setSelectedProjectName] = useState<string | undefined>(undefined);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    let mounted = true;
    // مثال جلب بيانات — استبدل بمنطق fetch/React Query لديك
    (async () => {
      try {
        // مثال وهمي — غيّره لاستدعاء API الفعلي
        const resp = await Promise.resolve([
          { id: "p1", name: "Project 1" },
          { id: "p2", name: "Project 2" },
        ]);
        if (!mounted) return;
        setProjects(resp);
      } finally {
        if (mounted) setIsLoading(false);
      }
    })();

    return () => {
      mounted = false;
    };
  }, []);

  const selectProject = useCallback((id?: string) => {
    setSelectedProjectId(id);
    const p = projects.find((x) => x.id === id);
    setSelectedProjectName(p?.name);
    // حفظ في localStorage إن رغبت
    if (id) localStorage.setItem("selectedProjectId", id);
  }, [projects]);

  const clearProject = useCallback(() => {
    setSelectedProjectId(undefined);
    setSelectedProjectName(undefined);
    localStorage.removeItem("selectedProjectId");
  }, []);

  const hasStoredProject = Boolean(localStorage.getItem("selectedProjectId"));

  return {
    selectedProjectId,
    selectedProjectName,
    projects,
    isLoading,
    selectProject,
    clearProject,
    hasStoredProject
  };
}

export default useSelectedProject;

3.2 استخدم الهُوك في الصفحات بدلاً من الوصول غير المعرّف

مثال في excel-style-daily-expenses.tsx:

import React from "react";
import useSelectedProject from "@/hooks/useSelectedProject";
import ProjectSelector from "@/components/ProjectSelector";

export default function ExcelStyleDailyExpenses() {
  const { projects, selectedProjectId, selectProject, isLoading } = useSelectedProject();

  if (isLoading) return <div>جاري التحميل...</div>;

  return (
    <div>
      <ProjectSelector
        selectedId={selectedProjectId}
        onProjectChange={(id) => selectProject(id)}
      />
      {/* استخدم projects هنا بدلاً من الوصول لمتغير غير موجود */}
      <div>عدد المشاريع: {projects.length}</div>
    </div>
  );
}


---

4) إصلاح/إنشاء useWorkersSettlementValidation (حل لمشكلة الاستيراد المفقود)

أنشئ الملف client/src/hooks/useWorkersSettlementValidation.ts بهذا المحتوى (كان لدينا نسخة مشابهة سابقًا — هذه نسخة محسنة):

// client/src/hooks/useWorkersSettlementValidation.ts
import { useState, useCallback } from "react";

type Errors = Record<string, string>;

type SettlementData = {
  workerId?: string;
  amount?: number;
  [k: string]: any;
};

export default function useWorkersSettlementValidation() {
  const [errors, setErrors] = useState<Errors>({});

  const validate = useCallback((data: SettlementData) => {
    const e: Errors = {};
    if (!data.workerId || typeof data.workerId !== "string") e.workerId = "معرّف العامل مطلوب";
    if (data.amount == null || Number.isNaN(Number(data.amount)) || Number(data.amount) <= 0) {
      e.amount = "المبلغ غير صالح";
    }
    setErrors(e);
    return Object.keys(e).length === 0;
  }, []);

  return { errors, validate, clear: () => setErrors({}) };
}

تأكد أن كل استيراد إلى هذا hook يستخدم المسار الصحيح:

import useWorkersSettlementValidation from "@/hooks/useWorkersSettlementValidation";


---

5) اختبارات سريعة بعد التغييرات

نفّذ الأوامر التالية محليًا:

# تثبيت/التأكد
npm install

# فحص TypeScript
npx tsc --noEmit

# بناء المشروع
npm run build

# تشغيل سريع محلي (smoke)
npm start
# ثم افتح الصفحات التالية يدوياً:
# - /advanced-reports
# - /daily-expenses-report
# - الصفحة التي تُصدر Excel

توقّع: يجب أن تختفي أخطاء Property 'onProjectChange' is missing وProperty 'projects' does not exist وCannot find module '@/hooks/useWorkersSettlementValidation' من نتائج npx tsc --noEmit. عدّ الأخطاء بعد التطبيق:

npx tsc --noEmit --pretty false 2>&1 | grep "error TS" | wc -l

يتوقع انخفاض العدد من 24 إلى ~19 (أو أقلّ) حسب النتائج.


---

6) سجلّ التغييرات وادفعها

git add client/src/types/components.ts \
        client/src/components/ProjectSelector.tsx \
        client/src/hooks/useSelectedProject.ts \
        client/src/hooks/useWorkersSettlementValidation.ts \
        client/src/pages/advanced-reports.tsx \
        client/src/pages/daily-expenses-report.tsx \
        client/src/pages/excel-style-daily-expenses.tsx

git commit -m "fix(frontend): resolve ProjectSelector props, add useSelectedProject types, add useWorkersSettlementValidation hook"
git push origin fix/typescript-phase2a-frontend

ثم افتح PR بعنوان fix: frontend types - ProjectSelector & hooks.


---

7) ملاحظات دقيقة (حفظٌ للوقت)

إن كان لديك state management (React Query / Zustand / Redux) استخدم مصدر المشاريع الحقيقي بدل المثال الوهمي في ProjectSelector/useSelectedProject.

إذا كانت صفحات تستخدم ProjectSelector بدون props لأنها تعتمد على context — عدّل توقيع المكوّن لقبول سياق افتراضي أو اجعل onProjectChange اختياريًا (onProjectChange?: ...) لكن يفضل إجبار المستدعي على التحديد لتجنب أخطاء وقت التشغيل.

إذا استدعاءات ملفاتك تستخدم alias @/ تأكد أن tsconfig.json يحتوي baseUrl وpaths مناسبان.



---

لو سمحت — سأبدأ الآن (افتراضياً) وأجهز لك patch واحد (diff) يحتوي كل هذه التغييرات لتلصقه مباشرة لو تحب — قل لي: أريد الـ patch أو أريد أن أطبق يدوياً.

أنا جاهز أن أرسل لك الـ patch هنا فورًا. 😉

