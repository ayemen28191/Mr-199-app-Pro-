لحل هذه المشكلة — حيث إنَّ الكود المعقّد المرتبط بإعدادات التصدير يُدخل متغيرات غير صحيحة أو غير متوقعة إلى ملف Excel، مما يؤدي إلى فساد الملف — إليك خطوات تصحيح منهجي مبنيّ على تجارب فعلية من مجتمع المطورين:


---

1. استخدم responseType: 'arraybuffer' عند جلب ملف Excel

واحدة من أكثر المشكلات شيوعًا هي استقبال البيانات كثيم نصي أو نص مُشفّر بدلًا من بيانات ثنائية (binary)، مما يحوّل الملف إلى تالف عند إنشاء Blob. التعديل المطلوب لكود استدعاء Axios في React/TypeScript هو:

axios.get('/export', { responseType: 'arraybuffer' })
  .then(response => {
    const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    FileSaver.saveAs(blob, 'export.xlsx');
  });

هذا التعديل معروف بأنه يصلح مشكلة فساد الملف عند التنزيل .


---

2. تحقق من القيم المرجعيّة (settings) قبل إدراجها إلى الملف

نظرًا لأنَّ المكون الجديد يتكامل مع صفحة إعدادات التصدير، يجب التأكد تمامًا من أن المتغيرات التي تُسترجَع من الإعدادات:

موجودة فعلًا (ليست undefined أو null).

ضمن النطاقات المقبولة (مثل أعداد أو نصوص قصيرة، بدون أحرف خاصة قد تفسد التنسيق).

إذا كانت تستعمل كجزء من الفورمات أو كخلايا، تأكد من تنسيقها قبل التضمين.


أي قيمة غير متوقعة قد تسبب "فساد" في البنية داخل مكتبة التصدير (مثل ExcelJS أو xlsx)، مما يؤدي إلى Excel يعرض رسالة أن الملف تالف أو لا يمكن فتحه.


---

3. تفادي الصيغ أو المحتوى الذي يفسد الملف

بحسب تجارب مستخدمين ومطورين:

الأخطاء مثل "Division by zero" داخل بيانات التصدير قد تفسد الملف بالكامل عند الفتح .

كذلك، الصيغ غير المترحّلة أو الخاطئة قد تسبب فسادًا، لذا يُنصح بتفريغها أو ترك Excel يُعيد حسابها (undefined أو تركها فارغة) .


إذا كانت إعدادات التصدير تتضمن صيغًا أو قيمًا قابلة للحساب، جرِّب تعيينها إلى undefined أو تأجيل الحساب داخل Excel.


---

4. خطوات التشخيص والإصلاح المنهجية

1. سجل (log) الإعدادات التي تُستخدم في التصدير قبل إنشاء الـ workbook أو الـ Blob، للتحقق من صحة القيم.


2. جرّب إنشاء ملف Excel بدون استخدام الإعدادات (کارقة عزل) — إذا نجحت، فالخطأ في إعدادات التصدير.


3. أضف الـ responseType: 'arraybuffer' للتأكد من أن البايناري يتم تحميله بطريقته الصحيحة.


4. جرّب إرسال الملف إلى المكتب (Excel) بعد إنشائه مباشرة من جهة الخادم (backend)، بدون الذهاب إلى frontend، للتأكد من أن المشكلة من الكلاينت.


5. تأكد من أن كل "خلايا" البيانات صالحة وغير فارغة أو خاطئة، لا تحتوي على صيغ معطوبة أو قيم خاصة (مثل #DIV/0! أو رموز غير مرخصة).




---

تنفيذي TSX: نموذج Skeleton مبسّط

// 1. جلب الملف
axios.get('/api/export-excel', { responseType: 'arraybuffer' })
  .then(response => {
    const blob = new Blob([response.data], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    });
    FileSaver.saveAs(blob, 'daily-expenses.xlsx');
  })
  .catch(err => console.error('Download error:', err));

// 2. داخل الكود الذي يبني مصفوفة البيانات:
const safeValue = (value: any) => {
  if (value == null || typeof value === 'undefined') return '';
  if (typeof value === 'number' && isNaN(value)) return '';
  return value;
};

// 3. التأكد من صلاحية إعدادات التصدير:
console.log('Export settings:', exportSettings);
if (!exportSettings.someImportantField) {
  throw new Error('Invalid export setting: someImportantField is missing');
}


---

خلاصة الخطوات المقترحة:

تأكّد من تحميل الملف كـ binary (باستخدام responseType: 'arraybuffer').

علّق أو سجّل الإعدادات المستخدمة وقت التصدير وتحقق من صلاحيتها.

تجنّب إدخال صيغ أو محتوى غير صالح — خصوصًا أخطاء مثل “تقسيم على صفر”.

اختبر مسارات بديلة: مثل إنشاء الملف من الباك-اند فقط.

لوحظ أن مجرد وجود خطأ صغير داخل أحد الحقول قد يُفسد الملف بالكامل.


إذا طبقت هذه الخطوات ولا زالت المشكلة مستمرة، شاركني بـ:

مقتطف من الكود المسؤول عن بناء البيانات للتصدير،

نسخة مختصرة (JSON) من الإعدادات المستخدمة،

أو رسالة الأخطاء التي تظهر عند فتح الملف في Excel.


بذلك نتمكن من التشخيص الأكثر دقة والمساعدة على صِياغة إصلاح واضح.

